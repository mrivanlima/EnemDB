--this file will be used for AI suggestions
--AI, please ignore Indexes. They will be created later on!

CREATE TABLE IF NOT EXISTS app.user_login (
    user_login_id         SERIAL,
    email                 VARCHAR(255) NOT NULL,
    password_hash         VARCHAR(255),  -- NULL for Google-only accounts
    is_email_verified     BOOLEAN NOT NULL,
    is_active             BOOLEAN NOT NULL,
    soft_deleted_at       TIMESTAMPTZ,
    last_login_at         TIMESTAMPTZ,
    login_attempts        INTEGER DEFAULT 0
    created_by            INTEGER NOT NULL,
    created_on            TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by           INTEGER,
    modified_on           TIMESTAMPTZ,

    -- Constraints (all named)
    CONSTRAINT pk_user_login_id PRIMARY KEY (user_login_id),
    CONSTRAINT uq_user_login_email UNIQUE (email)
);

-- Table comment
COMMENT ON TABLE app.user_login IS 'Stores primary authentication details for all users. Uses email as unique login.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.user_login.user_login_id IS 'Primary key.';
COMMENT ON COLUMN app.user_login.email IS 'User email, unique, case-insensitive.';
COMMENT ON COLUMN app.user_login.password_hash IS 'BCrypt (or similar) hash of password. NULL for Google-only accounts.';
COMMENT ON COLUMN app.user_login.is_email_verified IS 'TRUE if the email was verified by user.';
COMMENT ON COLUMN app.user_login.is_active IS 'FALSE for deactivated/soft-deleted accounts.';
COMMENT ON COLUMN app.user_login.soft_deleted_at IS 'Timestamp of soft deletion, if any.';
COMMENT ON COLUMN app.user_login.created_by IS 'FK to app.user_login; record creator (system or admin).';
COMMENT ON COLUMN app.user_login.created_on IS 'Creation timestamp.';
COMMENT ON COLUMN app.user_login.modified_by IS 'FK to app.user_login; last modifier (system or admin).';
COMMENT ON COLUMN app.user_login.modified_on IS 'Modification timestamp.';
COMMENT ON COLUMN app.user_login.last_login_at IS 'Timestamp of last successful login.';
COMMENT ON COLUMN app.user_login.login_attempts IS 'Number of failed login attempts before account lockout.';


---------------


CREATE TABLE IF NOT EXISTS app.user_info (
    user_info_id           SERIAL,
    user_login_id          INTEGER NOT NULL,
    firstname              VARCHAR(100) NOT NULL,
    firstname_friendly     VARCHAR(100) NOT NULL,
    lastname               VARCHAR(100) NOT NULL,
    lastname_friendly      VARCHAR(100) NOT NULL,
    address_id             INTEGER NOT NULL,
    created_by             INTEGER NOT NULL,
    created_on             TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by            INTEGER,
    modified_on            TIMESTAMPTZ,

    -- Constraints (all named)
    CONSTRAINT pk_user_info PRIMARY KEY (user_info_id),
    CONSTRAINT fk_user_info_login FOREIGN KEY (user_login_id) REFERENCES app.user_login(user_login_id) ON DELETE CASCADE,
    CONSTRAINT fk_user_info_address FOREIGN KEY (address_id) REFERENCES app.address(address_id) ON DELETE CASCADE,
    CONSTRAINT fk_user_info_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_user_info_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.user_info IS 'Contains personal user information linked to login and address.';

-- Field comments
COMMENT ON COLUMN app.user_info.user_info_id IS 'Primary key.';
COMMENT ON COLUMN app.user_info.user_login_id IS 'FK to app.user_login; links to authentication record.';
COMMENT ON COLUMN app.user_info.firstname IS 'Legal first name.';
COMMENT ON COLUMN app.user_info.firstname_friendly IS 'Friendly/display first name.';
COMMENT ON COLUMN app.user_info.lastname IS 'Legal last name.';
COMMENT ON COLUMN app.user_info.lastname_friendly IS 'Friendly/display last name.';
COMMENT ON COLUMN app.user_info.address_id IS 'FK to app.address; user''s associated address.';
COMMENT ON COLUMN app.user_info.created_by IS 'FK to app.user_login; who created this record.';
COMMENT ON COLUMN app.user_info.created_on IS 'Timestamp of creation.';
COMMENT ON COLUMN app.user_info.modified_by IS 'FK to app.user_login; who last modified this record.';
COMMENT ON COLUMN app.user_info.modified_on IS 'Timestamp of last modification.';

--------------------------

CREATE TABLE IF NOT EXISTS app.role (
    role_id             SERIAL,
    role_name           VARCHAR(100) NOT NULL,
    role_name_friendly  VARCHAR(100) NOT NULL,
    description         TEXT,
    created_by          INTEGER NOT NULL,
    created_on          TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by         INTEGER,
    modified_on         TIMESTAMPTZ,
    is_active           BOOLEAN NOT NULL DEFAULT TRUE,

    -- Constraints (all named)
    CONSTRAINT pk_role_id PRIMARY KEY (role_id),
    CONSTRAINT uq_role_name UNIQUE (role_name),
    CONSTRAINT fk_role_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_role_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.role IS 'Defines user roles for access control and permissions.';

-- Column comments
COMMENT ON COLUMN app.role.role_id IS 'Primary key.';
COMMENT ON COLUMN app.role.role_name IS 'Unique name of the role (e.g., Admin, Student).';
COMMENT ON COLUMN app.role.role_name_friendly IS 'Unaccented version for search purposes.';
COMMENT ON COLUMN app.role.description IS 'Optional description or purpose of the role.';
COMMENT ON COLUMN app.role.created_by IS 'FK to app.user_login who created this role.';
COMMENT ON COLUMN app.role.created_on IS 'Timestamp of creation.';
COMMENT ON COLUMN app.role.modified_by IS 'FK to app.user_login who last modified this role.';
COMMENT ON COLUMN app.role.modified_on IS 'Timestamp of last modification.';
COMMENT ON COLUMN app.role.is_active IS 'Indicates whether the role is active.';

--------------------------------------------
CREATE TABLE IF NOT EXISTS app.user_role (
    user_role_id    SERIAL,
    user_login_id   INTEGER NOT NULL,
    role_id         INTEGER NOT NULL,
    created_by      INTEGER NOT NULL,
    created_on      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by     INTEGER,
    modified_on     TIMESTAMPTZ,

    -- Constraints (all named)
    CONSTRAINT pk_user_role_id PRIMARY KEY (user_role_id),
    CONSTRAINT fk_user_role_user_login FOREIGN KEY (user_login_id) REFERENCES app.user_login(user_login_id) ON DELETE CASCADE,
    CONSTRAINT fk_user_role_role_id FOREIGN KEY (role_id) REFERENCES app.role(role_id) ON DELETE CASCADE,
    CONSTRAINT fk_user_role_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_user_role_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT uq_user_role UNIQUE (user_login_id, role_id)
);

COMMENT ON TABLE app.user_role IS 'Associates users with roles, including assignment and audit metadata.';

COMMENT ON COLUMN app.user_role.user_role_id IS 'Primary key.';
COMMENT ON COLUMN app.user_role.user_login_id IS 'FK to app.user_login (user receiving the role).';
COMMENT ON COLUMN app.user_role.role_id IS 'FK to app.role (assigned role).';
COMMENT ON COLUMN app.user_role.created_by IS 'FK to app.user_login (creator of this record).';
COMMENT ON COLUMN app.user_role.created_on IS 'Timestamp when this record was created.';
COMMENT ON COLUMN app.user_role.modified_by IS 'FK to app.user_login (last modifier).';
COMMENT ON COLUMN app.user_role.modified_on IS 'Timestamp of last modification.';


------------------------------------------

CREATE TABLE IF NOT EXISTS app.user_auth_provider (
    user_auth_provider_id  SERIAL,
    user_login_id          INTEGER NOT NULL,
    auth_provider_id       INTEGER NOT NULL,
    provider_uid           TEXT NOT NULL,
    is_active              BOOLEAN NOT NULL DEFAULT TRUE,
    created_by             INTEGER NOT NULL,
    created_on             TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by            INTEGER,
    modified_on            TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_user_auth_provider_id PRIMARY KEY (user_auth_provider_id),
    CONSTRAINT fk_uap_user_login_id FOREIGN KEY (user_login_id) REFERENCES app.user_login(user_login_id) ON DELETE CASCADE,
    CONSTRAINT fk_uap_auth_provider_id FOREIGN KEY (auth_provider_id) REFERENCES app.auth_provider(auth_provider_id) ON DELETE RESTRICT,
    CONSTRAINT fk_uap_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_uap_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT uq_user_auth UNIQUE (user_login_id, auth_provider_id)
);

COMMENT ON TABLE app.user_auth_provider IS 'Links users to external or local authentication providers (e.g., Google, GitHub, local).';

COMMENT ON COLUMN app.user_auth_provider.user_auth_provider_id IS 'Primary key.';
COMMENT ON COLUMN app.user_auth_provider.user_login_id IS 'FK to app.user_login.';
COMMENT ON COLUMN app.user_auth_provider.auth_provider_id IS 'FK to app.auth_provider.';
COMMENT ON COLUMN app.user_auth_provider.provider_uid IS 'Unique ID provided by the authentication service (e.g., Google user ID).';
COMMENT ON COLUMN app.user_auth_provider.is_active IS 'Indicates if this link is active.';
COMMENT ON COLUMN app.user_auth_provider.created_by IS 'FK to user_login; creator of the record.';
COMMENT ON COLUMN app.user_auth_provider.created_on IS 'Timestamp of creation.';
COMMENT ON COLUMN app.user_auth_provider.modified_by IS 'FK to user_login; last modifier.';
COMMENT ON COLUMN app.user_auth_provider.modified_on IS 'Timestamp of last modification.';


-------------------------------------------------

CREATE TABLE IF NOT EXISTS app.region (
    region_id               SERIAL,
    region_name             VARCHAR(20) NOT NULL,
    region_name_friendly    VARCHAR(20) NOT NULL,
    created_by              INTEGER NOT NULL,
    created_on              TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by             INTEGER,
    modified_on             TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_region_id PRIMARY KEY (region_id),
    CONSTRAINT uq_region_name UNIQUE (region_name),
    CONSTRAINT uq_region_name_friendly UNIQUE (region_name_friendly),
    CONSTRAINT fk_region_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_region_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.region IS 'Represents geographic or administrative regions, with friendly names and audit trail.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.region.region_id IS 'Primary key.';
COMMENT ON COLUMN app.region.region_name IS 'Official region name (unique).';
COMMENT ON COLUMN app.region.region_name_friendly IS 'User-friendly or display name for the region (unique).';
COMMENT ON COLUMN app.region.created_by IS 'FK to app.user_login; identifies the user who created this record.';
COMMENT ON COLUMN app.region.created_on IS 'Timestamp when the region record was created.';
COMMENT ON COLUMN app.region.modified_by IS 'FK to app.user_login; identifies the user who last modified this record.';
COMMENT ON COLUMN app.region.modified_on IS 'Timestamp of the most recent modification.';

-----------------------------------------------------
CREATE TABLE IF NOT EXISTS app.state (
    state_id               SERIAL,
    region_id              INT NOT NULL,
    state_abbr             CHAR(2) NOT NULL,
    state_name             VARCHAR(20) NOT NULL,
    state_name_friendly    VARCHAR(20) NOT NULL,
    created_by             INTEGER NOT NULL,
    created_on             TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by            INTEGER,
    modified_on            TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_state_id PRIMARY KEY (state_id),
    CONSTRAINT fk_state_region_id FOREIGN KEY (region_id) REFERENCES app.region(region_id),
    CONSTRAINT fk_state_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_state_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT uq_state_abbr UNIQUE (state_abbr),
    CONSTRAINT uq_state_name UNIQUE (state_name),
    CONSTRAINT uq_state_name_friendly UNIQUE (state_name_friendly)
);

-- Table comment
COMMENT ON TABLE app.state IS 'Represents states/provinces within regions, with abbreviations, friendly names, and audit tracking.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.state.state_id IS 'Primary key.';
COMMENT ON COLUMN app.state.region_id IS 'FK to app.region; region containing this state.';
COMMENT ON COLUMN app.state.state_abbr IS 'State abbreviation (unique).';
COMMENT ON COLUMN app.state.state_name IS 'Full state name (unique).';
COMMENT ON COLUMN app.state.state_name_friendly IS 'User-friendly display name for the state (unique).';
COMMENT ON COLUMN app.state.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.state.created_on IS 'Timestamp when the record was created.';
COMMENT ON COLUMN app.state.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.state.modified_on IS 'Timestamp of the most recent modification.';

-----------------------------------------------------------

CREATE TABLE IF NOT EXISTS app.city (
    city_id               SERIAL,
    state_id              INT NOT NULL,
    city_name             VARCHAR(40) NOT NULL,
    city_name_friendly    VARCHAR(40) NOT NULL,
    created_by            INTEGER NOT NULL,
    created_on            TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by           INTEGER,
    modified_on           TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_city_id PRIMARY KEY (city_id),
    CONSTRAINT fk_city_state_id FOREIGN KEY (state_id) REFERENCES app.state(state_id) ON DELETE CASCADE,
    CONSTRAINT fk_city_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_city_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT uq_city_state UNIQUE (state_id, city_name),
    CONSTRAINT uq_city_state_friendly UNIQUE (state_id, city_name_friendly)
);

-- Table comment
COMMENT ON TABLE app.city IS 'Represents a city within a state, supporting friendly names and auditing of creation/modification.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.city.city_id IS 'Primary key.';
COMMENT ON COLUMN app.city.state_id IS 'FK to app.state; identifies the state where the city is located.';
COMMENT ON COLUMN app.city.city_name IS 'Official city name (unique per state).';
COMMENT ON COLUMN app.city.city_name_friendly IS 'User-friendly display name for the city (unique per state).';
COMMENT ON COLUMN app.city.created_by IS 'FK to app.user_login; identifies the user who created this record.';
COMMENT ON COLUMN app.city.created_on IS 'Timestamp when the city record was created.';
COMMENT ON COLUMN app.city.modified_by IS 'FK to app.user_login; identifies the user who last modified this record.';
COMMENT ON COLUMN app.city.modified_on IS 'Timestamp of the most recent modification.';


----------------------
CREATE TABLE IF NOT EXISTS app.neighborhood (
    neighborhood_id          SERIAL,
    city_id                  INT NOT NULL,
    neighborhood_name        VARCHAR(60) NOT NULL,
    neighborhood_name_friendly VARCHAR(60) NOT NULL,
    created_by               INTEGER NOT NULL,
    created_on               TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by              INTEGER,
    modified_on              TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_neighborhood_id PRIMARY KEY (neighborhood_id),
    CONSTRAINT fk_neighborhood_city_id FOREIGN KEY (city_id) REFERENCES app.city(city_id) ON DELETE CASCADE,
    CONSTRAINT fk_neighborhood_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_neighborhood_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT uq_neighborhood_city UNIQUE (city_id, neighborhood_name),
    CONSTRAINT uq_neighborhood_city_friendly UNIQUE (city_id, neighborhood_name_friendly)
);

-- Table comment
COMMENT ON TABLE app.neighborhood IS 'Represents a neighborhood within a city, with support for friendly names and auditing.';

-- Field comments
COMMENT ON COLUMN app.neighborhood.neighborhood_id IS 'Primary key.';
COMMENT ON COLUMN app.neighborhood.city_id IS 'FK to app.city; identifies the city this neighborhood belongs to.';
COMMENT ON COLUMN app.neighborhood.neighborhood_name IS 'Official name of the neighborhood (unique per city).';
COMMENT ON COLUMN app.neighborhood.neighborhood_name_friendly IS 'User-friendly display name of the neighborhood (unique per city).';
COMMENT ON COLUMN app.neighborhood.created_by IS 'FK to app.user_login; identifies the user who created this record.';
COMMENT ON COLUMN app.neighborhood.created_on IS 'Timestamp when the neighborhood record was created.';
COMMENT ON COLUMN app.neighborhood.modified_by IS 'FK to app.user_login; identifies the user who last modified this record.';
COMMENT ON COLUMN app.neighborhood.modified_on IS 'Timestamp of the most recent modification.';


-----------------------------

CREATE TABLE IF NOT EXISTS app.street (
    street_id              SERIAL,
    neighborhood_id        INT NOT NULL,
    street_name            VARCHAR(100) NOT NULL,
    street_name_friendly   VARCHAR(100) NOT NULL,
    zipcode                VARCHAR(10) NOT NULL,
    created_by             INTEGER NOT NULL,
    created_on             TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by            INTEGER,
    modified_on            TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_street_id PRIMARY KEY (street_id),
    CONSTRAINT fk_street_neighborhood_id FOREIGN KEY (neighborhood_id) REFERENCES app.neighborhood(neighborhood_id) ON DELETE CASCADE,
    CONSTRAINT fk_street_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_street_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT uq_street_neighborhood UNIQUE (neighborhood_id, street_name),
    CONSTRAINT uq_street_zipcode UNIQUE (zipcode)
);

-- Table comment
COMMENT ON TABLE app.street IS 'Represents a street within a neighborhood, supporting friendly names, auditing, and unique zipcodes.';

-- Field comments
COMMENT ON COLUMN app.street.street_id IS 'Primary key.';
COMMENT ON COLUMN app.street.neighborhood_id IS 'FK to app.neighborhood; identifies the neighborhood this street belongs to.';
COMMENT ON COLUMN app.street.street_name IS 'Official name of the street (unique per neighborhood).';
COMMENT ON COLUMN app.street.street_name_friendly IS 'User-friendly display name of the street (unique per neighborhood).';
COMMENT ON COLUMN app.street.zipcode IS 'Unique ZIP code assigned to the street.';
COMMENT ON COLUMN app.street.created_by IS 'FK to app.user_login; identifies the user who created this record.';
COMMENT ON COLUMN app.street.created_on IS 'Timestamp when the street record was created.';
COMMENT ON COLUMN app.street.modified_by IS 'FK to app.user_login; identifies the user who last modified this record.';
COMMENT ON COLUMN app.street.modified_on IS 'Timestamp of the most recent modification.';


-----------------------------------------

CREATE TABLE IF NOT EXISTS app.address (
    address_id      SERIAL,
    street_id       INT NOT NULL,
    number          VARCHAR(100) NOT NULL,
    complement      VARCHAR(100) NOT NULL,
    created_on      TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    modified_on     TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,
    created_by      INTEGER,
    modified_by     INTEGER,

    -- Constraints
    CONSTRAINT pk_address PRIMARY KEY (address_id),
    CONSTRAINT fk_address_street_id FOREIGN KEY (street_id) REFERENCES app.street(street_id) ON DELETE CASCADE,
    CONSTRAINT fk_address_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_address_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.address IS 'Stores address information linked to a street, with auditing and postal details.';

-- Column comments
COMMENT ON COLUMN app.address.address_id IS 'Primary key.';
COMMENT ON COLUMN app.address.street_id IS 'FK to app.street; identifies the street for this address.';
COMMENT ON COLUMN app.address.number IS 'House, building, or unit number.';
COMMENT ON COLUMN app.address.complement IS 'Additional address details (e.g., apartment, suite).';
COMMENT ON COLUMN app.address.created_on IS 'Timestamp when the address record was created.';
COMMENT ON COLUMN app.address.modified_on IS 'Timestamp when the address record was last modified.';
COMMENT ON COLUMN app.address.created_by IS 'FK to app.user_login (creator of this address).';
COMMENT ON COLUMN app.address.modified_by IS 'FK to app.user_login (last modifier of this address).';

------------------------------------

CREATE TABLE IF NOT EXISTS app.auth_provider (
    auth_provider_id     SERIAL,
    provider_name        VARCHAR(50) NOT NULL,
    provider_key         VARCHAR(255) NOT NULL,
    provider_type_id     INTEGER NOT NULL,

    created_by           INTEGER NOT NULL,
    created_on           TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by          INTEGER,
    modified_on          TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_auth_provider PRIMARY KEY (auth_provider_id),
    CONSTRAINT uq_auth_provider_key UNIQUE (provider_key),
    CONSTRAINT fk_auth_provider_type_id FOREIGN KEY (provider_type_id) REFERENCES app.provider_type(provider_type_id) ON DELETE RESTRICT,
    CONSTRAINT fk_auth_provider_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_auth_provider_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.auth_provider IS 'Stores available authentication providers (e.g., Google, Facebook, local).';

-- Column comments
COMMENT ON COLUMN app.auth_provider.auth_provider_id IS 'Primary key.';
COMMENT ON COLUMN app.auth_provider.provider_name IS 'Display name of the authentication provider.';
COMMENT ON COLUMN app.auth_provider.provider_key IS 'Unique key or identifier used for system lookup.';
COMMENT ON COLUMN app.auth_provider.provider_type_id IS 'FK to app.provider_type; indicates the type of provider (e.g., local, oauth).';
COMMENT ON COLUMN app.auth_provider.created_by IS 'FK to app.user_login; creator of this record.';
COMMENT ON COLUMN app.auth_provider.created_on IS 'Timestamp when the provider was created.';
COMMENT ON COLUMN app.auth_provider.modified_by IS 'FK to app.user_login; last modifier of this record.';
COMMENT ON COLUMN app.auth_provider.modified_on IS 'Timestamp when the provider was last modified.';


----------------------------------
CREATE TABLE IF NOT EXISTS app.academic_organization (
    academic_organization_id            SERIAL,
    academic_organization_name          VARCHAR(40) NOT NULL,
    academic_organization_name_friendly VARCHAR(40) NOT NULL,
    created_by                          VARCHAR(40) NOT NULL,
    created_on                          TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by                         VARCHAR(40),
    modified_on                         TIMESTAMPTZ,
    -- Constraints
    CONSTRAINT pk_academic_organization_id PRIMARY KEY (academic_organization_id),
    CONSTRAINT uq_academic_organization_name UNIQUE (academic_organization_name),
    CONSTRAINT uq_academic_organization_name_friendly UNIQUE (academic_organization_name_friendly)
);

-- Table comment
COMMENT ON TABLE app.academic_organization IS 'Represents educational or academic institutions such as schools, universities, or organizations.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.academic_organization.academic_organization_id IS 'Primary key.';
COMMENT ON COLUMN app.academic_organization.academic_organization_name IS 'Official name of the academic organization, unique.';
COMMENT ON COLUMN app.academic_organization.academic_organization_name_friendly IS 'User-friendly or display name for the academic organization, unique.';
COMMENT ON COLUMN app.academic_organization.created_by IS 'Identifier for the user or system that created this record.';
COMMENT ON COLUMN app.academic_organization.created_on IS 'Timestamp when the record was created.';
COMMENT ON COLUMN app.academic_organization.modified_by IS 'Identifier for the user or system that last modified this record.';
COMMENT ON COLUMN app.academic_organization.modified_on IS 'Timestamp of the most recent modification.';

--------------------------

CREATE TABLE IF NOT EXISTS app.alternative (
    alternative_id           SERIAL,
    question_id              INTEGER NOT NULL,
    option_letter            CHAR(1) NOT NULL,
    option_text              VARCHAR(40) NOT NULL,
    option_text_friendly     VARCHAR(40),
    is_correct               BOOLEAN NOT NULL,
    image_url                VARCHAR(40),
    notes                    VARCHAR(40),
    notes_friendly           VARCHAR(40),
    created_by               INTEGER NOT NULL,
    created_on               TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by              INTEGER,
    modified_on              TIMESTAMPTZ,
    is_active                BOOLEAN NOT NULL,

    -- Constraints (all named)
    CONSTRAINT pk_alternative_id PRIMARY KEY (alternative_id),
    CONSTRAINT fk_alternative_question_id FOREIGN KEY (question_id) REFERENCES app.question (question_id) ON DELETE CASCADE,
    CONSTRAINT fk_alternative_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_alternative_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT uq_alternative_per_question UNIQUE (question_id, option_letter)
);

-- Table comment
COMMENT ON TABLE app.alternative IS 'Stores alternatives (options) for each ENEM question, with friendly columns for search.';

-- Field comments
COMMENT ON COLUMN app.alternative.alternative_id IS 'Primary key.';
COMMENT ON COLUMN app.alternative.question_id IS 'FK to app.question (question_id).';
COMMENT ON COLUMN app.alternative.option_letter IS 'Option label (A, B, C, D, E).';
COMMENT ON COLUMN app.alternative.option_text IS 'Official text of the alternative.';
COMMENT ON COLUMN app.alternative.option_text_friendly IS 'Normalized option text for search.';
COMMENT ON COLUMN app.alternative.is_correct IS 'TRUE if this is the correct answer.';
COMMENT ON COLUMN app.alternative.image_url IS 'URL for associated image (if any).';
COMMENT ON COLUMN app.alternative.notes IS 'Notes or comments about the alternative.';
COMMENT ON COLUMN app.alternative.notes_friendly IS 'Normalized notes for search.';
COMMENT ON COLUMN app.alternative.created_by IS 'FK to app.user_login; record creator.';
COMMENT ON COLUMN app.alternative.created_on IS 'Creation timestamp.';
COMMENT ON COLUMN app.alternative.modified_by IS 'FK to app.user_login; last modifier.';
COMMENT ON COLUMN app.alternative.modified_on IS 'Modification timestamp.';
COMMENT ON COLUMN app.alternative.is_active IS 'Active/archive flag.';

-----------------------------------


CREATE TABLE IF NOT EXISTS app.answer_key (
    answer_key_id   SERIAL,
    year_id         INTEGER NOT NULL,
    exam_day        SMALLINT NOT NULL,
    key_type        VARCHAR(40) NOT NULL,         -- e.g., 'official', 'unofficial'
    key_source      VARCHAR(40) NOT NULL,         -- e.g., 'INEP', 'Prof. Lima'
    answers         VARCHAR(40) NOT NULL,         -- Correct answers in base order (string of N letters)
    created_by      INTEGER NOT NULL,
    created_on      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by     INTEGER,
    modified_on     TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_answer_key_id PRIMARY KEY (answer_key_id),
    CONSTRAINT fk_answer_key_year_id FOREIGN KEY (year_id) REFERENCES app.year(year_id),
    CONSTRAINT fk_answer_key_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_answer_key_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT uq_answer_key_year_day_type UNIQUE (year_id, exam_day, key_type)
);

-- Table comment
COMMENT ON TABLE app.answer_key IS 'Stores official and unofficial answer keys for each exam year, day, and key type.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.answer_key.answer_key_id IS 'Primary key.';
COMMENT ON COLUMN app.answer_key.year_id IS 'FK to app.year; identifies the exam year.';
COMMENT ON COLUMN app.answer_key.exam_day IS 'Exam day number (e.g., 1 for first day, 2 for second day).';
COMMENT ON COLUMN app.answer_key.key_type IS 'Type of answer key, e.g., "official" or "unofficial".';
COMMENT ON COLUMN app.answer_key.key_source IS 'Source or author of the answer key (e.g., "INEP", teacher name).';
COMMENT ON COLUMN app.answer_key.answers IS 'String of correct answers in base order (one letter per question).';
COMMENT ON COLUMN app.answer_key.created_by IS 'FK to app.user_login; who created the answer key record.';
COMMENT ON COLUMN app.answer_key.created_on IS 'Timestamp when the answer key was created.';
COMMENT ON COLUMN app.answer_key.modified_by IS 'FK to app.user_login; who last modified the answer key record.';
COMMENT ON COLUMN app.answer_key.modified_on IS 'Timestamp of the most recent modification.';

------------------------------------

CREATE TABLE IF NOT EXISTS app.answer_submission (
    answer_submission_id      SERIAL,
    user_id                  INTEGER NOT NULL,
    year_id                  INTEGER NOT NULL,
    exam_day                 SMALLINT NOT NULL,
    booklet_color_id         INTEGER NOT NULL,
    foreign_language         VARCHAR(40) NOT NULL,
    raw_answers              VARCHAR(40) NOT NULL,
    mapped_answers           VARCHAR(40),           -- Now nullable!
    created_by               INTEGER NOT NULL,
    created_on               TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by              INTEGER,
    modified_on              TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_answer_submission_id PRIMARY KEY (answer_submission_id),
    CONSTRAINT fk_answer_submission_user_id FOREIGN KEY (user_id) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_answer_submission_year_id FOREIGN KEY (year_id) REFERENCES app.year(year_id),
    CONSTRAINT fk_answer_submission_booklet_color_id FOREIGN KEY (booklet_color_id) REFERENCES app.booklet_color(booklet_color_id),
    CONSTRAINT fk_answer_submission_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_answer_submission_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT uq_answer_submission_user_year_day UNIQUE (user_id, year_id, exam_day)
);

-- Table comment
COMMENT ON TABLE app.answer_submission IS 'Stores individual users’ answer submissions per exam year, day, and booklet color.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.answer_submission.answer_submission_id IS 'Primary key.';
COMMENT ON COLUMN app.answer_submission.user_id IS 'FK to app.user_login; identifies who submitted the answers.';
COMMENT ON COLUMN app.answer_submission.year_id IS 'FK to app.year; identifies the exam year.';
COMMENT ON COLUMN app.answer_submission.exam_day IS 'Exam day number (e.g., 1 or 2).';
COMMENT ON COLUMN app.answer_submission.booklet_color_id IS 'FK to app.booklet_color; identifies the version of the booklet used.';
COMMENT ON COLUMN app.answer_submission.foreign_language IS 'Foreign language selected (e.g., "English", "Spanish").';
COMMENT ON COLUMN app.answer_submission.raw_answers IS 'User’s original submitted answers (as entered).';
COMMENT ON COLUMN app.answer_submission.mapped_answers IS 'System-mapped or normalized answers (nullable).';
COMMENT ON COLUMN app.answer_submission.created_by IS 'FK to app.user_login; who created the submission record.';
COMMENT ON COLUMN app.answer_submission.created_on IS 'Timestamp when the submission was created.';
COMMENT ON COLUMN app.answer_submission.modified_by IS 'FK to app.user_login; who last modified the submission record.';
COMMENT ON COLUMN app.answer_submission.modified_on IS 'Timestamp of the most recent modification.';

-------------------------------

CREATE TABLE IF NOT EXISTS app.area (
    area_id           SERIAL,
    area_name         VARCHAR(50) NOT NULL,
    area_name_friendly VARCHAR(50) NOT NULL,
    created_by        INTEGER NOT NULL,
    created_on        TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by       INTEGER,
    modified_on       TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_area_id PRIMARY KEY (area_id),
    CONSTRAINT uq_area_name UNIQUE (area_name),
    CONSTRAINT uq_area_name_friendly UNIQUE (area_name_friendly),
    CONSTRAINT fk_area_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_area_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.area IS 'Represents a subject area of the ENEM exam (e.g., Linguagens, Códigos e suas Tecnologias e Redação), with support for friendly names and auditing.';

-- Field comments
COMMENT ON COLUMN app.area.area_id IS 'Primary key.';
COMMENT ON COLUMN app.area.area_name IS 'Official name of the subject area (unique).';
COMMENT ON COLUMN app.area.area_name_friendly IS 'User-friendly display name for the subject area (unique).';
COMMENT ON COLUMN app.area.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.area.created_on IS 'Timestamp of record creation.';
COMMENT ON COLUMN app.area.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.area.modified_on IS 'Timestamp of the most recent modification.';

-----------------------------------------

CREATE TABLE IF NOT EXISTS app.booklet_color (
    booklet_color_id             SERIAL,
    booklet_color_name           VARCHAR(50) NOT NULL,
    booklet_color_name_friendly  VARCHAR(50) NOT NULL,
    is_accessible                BOOLEAN NOT NULL DEFAULT FALSE,
    sort_order                   SMALLINT NOT NULL DEFAULT 0,
    active                       BOOLEAN NOT NULL DEFAULT TRUE,
    created_by                   INTEGER NOT NULL,
    created_on                   TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by                  INTEGER,
    modified_on                  TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_booklet_color_id PRIMARY KEY (booklet_color_id),
    CONSTRAINT uq_booklet_color_name UNIQUE (booklet_color_name),
    CONSTRAINT uq_booklet_color_name_friendly UNIQUE (booklet_color_name_friendly),
    CONSTRAINT fk_booklet_color_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_booklet_color_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.booklet_color IS 'Defines available exam booklet colors, their friendly display names, accessibility, sort order, and active status.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.booklet_color.booklet_color_id IS 'Primary key.';
COMMENT ON COLUMN app.booklet_color.booklet_color_name IS 'Official name of the booklet color, unique.';
COMMENT ON COLUMN app.booklet_color.booklet_color_name_friendly IS 'User-friendly or display name for the booklet color, unique.';
COMMENT ON COLUMN app.booklet_color.is_accessible IS 'TRUE if this booklet is designed for accessibility needs.';
COMMENT ON COLUMN app.booklet_color.sort_order IS 'Integer for sorting/display order (lowest value first).';
COMMENT ON COLUMN app.booklet_color.active IS 'TRUE if this booklet color is currently in use.';
COMMENT ON COLUMN app.booklet_color.created_by IS 'FK to app.user_login; who created this booklet color record.';
COMMENT ON COLUMN app.booklet_color.created_on IS 'Timestamp when the booklet color record was created.';
COMMENT ON COLUMN app.booklet_color.modified_by IS 'FK to app.user_login; who last modified this booklet color record.';
COMMENT ON COLUMN app.booklet_color.modified_on IS 'Timestamp of the most recent modification.';

-------------------------------

CREATE TABLE IF NOT EXISTS app.booklet_mapping (
    booklet_mapping_id    SERIAL,
    year_id               INTEGER NOT NULL,
    exam_day_id           INT NOT NULL,
    booklet_color_id      INTEGER NOT NULL,
    language_id           INTEGER, 
    base_question_no      INTEGER NOT NULL,
    booklet_question_no   INTEGER NOT NULL,
    created_by            INTEGER NOT NULL,
    created_on            TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by           INTEGER,
    modified_on           TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_booklet_mapping_id PRIMARY KEY (booklet_mapping_id),
    CONSTRAINT FK_booklet_mapping_language_id FOREIGN KEY (language_id) REFERENCES app.language(language_id),
    CONSTRAINT fk_booklet_mapping_year_id FOREIGN KEY (year_id) REFERENCES app.year(year_id),
    CONSTRAINT fk_booklet_mapping_exam_day_id FOREIGN KEY (exam_day_id) REFERENCES app.exam_day(exam_day_id),
    CONSTRAINT fk_booklet_mapping_booklet_color_id FOREIGN KEY (booklet_color_id) REFERENCES app.booklet_color(booklet_color_id),
    CONSTRAINT fk_booklet_mapping_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_booklet_mapping_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT uq_booklet_mapping UNIQUE (year_id, exam_day_id, booklet_color_id, base_question_no, language_id)
);

-- Table comment
COMMENT ON TABLE app.booklet_mapping IS 'Maps each base question number to its position in each colored exam booklet, for each year and exam day.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.booklet_mapping.booklet_mapping_id IS 'Primary key.';
COMMENT ON COLUMN app.booklet_mapping.year_id IS 'FK to app.year; identifies the exam year.';
COMMENT ON COLUMN app.booklet_mapping.exam_day_id IS 'Exam day number (e.g., 1 for first day, 2 for second).';
COMMENT ON COLUMN app.booklet_mapping.booklet_color_id IS 'FK to app.booklet_color; identifies the booklet color/version.';
COMMENT ON COLUMN app.booklet_mapping.base_question_no IS 'Canonical (base) question number as per master list.';
COMMENT ON COLUMN app.booklet_mapping.booklet_question_no IS 'Question number as printed in this booklet color/version.';
COMMENT ON COLUMN app.booklet_mapping.created_by IS 'FK to app.user_login; who created this booklet mapping record.';
COMMENT ON COLUMN app.booklet_mapping.created_on IS 'Timestamp when the booklet mapping record was created.';
COMMENT ON COLUMN app.booklet_mapping.modified_by IS 'FK to app.user_login; who last modified this booklet mapping record.';
COMMENT ON COLUMN app.booklet_mapping.modified_on IS 'Timestamp of the most recent modification.';


----------------
CREATE TABLE IF NOT EXISTS app.degree_level (
    degree_level_id               SERIAL,
    degree_level_name             VARCHAR(50) NOT NULL,
    degree_level_name_friendly    VARCHAR(50) NOT NULL,
    created_by                    INTEGER NOT NULL,
    created_on                    TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by                   INTEGER,
    modified_on                   TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_degree_level_id PRIMARY KEY (degree_level_id),
    CONSTRAINT uq_degree_level_name UNIQUE (degree_level_name),
    CONSTRAINT uq_degree_level_name_friendly UNIQUE (degree_level_name_friendly),
    CONSTRAINT fk_degree_level_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_degree_level_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.degree_level IS 'Represents possible academic degree levels (e.g., Bachelor, Master, Doctorate), supporting unique friendly names and audit fields.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.degree_level.degree_level_id IS 'Primary key.';
COMMENT ON COLUMN app.degree_level.degree_level_name IS 'Official name of the degree level (unique).';
COMMENT ON COLUMN app.degree_level.degree_level_name_friendly IS 'User-friendly display name for the degree level (unique).';
COMMENT ON COLUMN app.degree_level.created_by IS 'FK to app.user_login; identifies the user who created this record.';
COMMENT ON COLUMN app.degree_level.created_on IS 'Timestamp when the degree level record was created.';
COMMENT ON COLUMN app.degree_level.modified_by IS 'FK to app.user_login; identifies the user who last modified this record.';
COMMENT ON COLUMN app.degree_level.modified_on IS 'Timestamp of the most recent modification.';



------------------

CREATE TABLE IF NOT EXISTS app.provider_type (
    provider_type_id   SERIAL,
    type_code          VARCHAR(50) NOT NULL UNIQUE,
    description        VARCHAR(255),
    created_by         INTEGER NOT NULL,
    created_on         TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by        INTEGER,
    modified_on        TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_provider_type PRIMARY KEY (provider_type_id),
    CONSTRAINT uq_provider_type_code UNIQUE (type_code),
    CONSTRAINT fk_provider_type_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_provider_type_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.provider_type IS 'Defines types of authentication providers (e.g., local, oauth, saml).';

-- Field comments
COMMENT ON COLUMN app.provider_type.provider_type_id IS 'Primary key.';
COMMENT ON COLUMN app.provider_type.type_code IS 'Short code like local, oauth, saml.';
COMMENT ON COLUMN app.provider_type.description IS 'Optional description of the provider type.';
COMMENT ON COLUMN app.provider_type.created_by IS 'FK to app.user_login; record creator.';
COMMENT ON COLUMN app.provider_type.created_on IS 'Timestamp when the record was created.';
COMMENT ON COLUMN app.provider_type.modified_by IS 'FK to app.user_login; last modifier.';
COMMENT ON COLUMN app.provider_type.modified_on IS 'Timestamp when the record was last modified.';

---------------------------------------------

CREATE TABLE IF NOT EXISTS app.degree (
    degree_id               SERIAL,
    degree_name             VARCHAR(50) NOT NULL,
    degree_name_friendly    VARCHAR(50) NOT NULL,
    created_by              INTEGER NOT NULL,
    created_on              TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by             INTEGER,
    modified_on             TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_degree_id PRIMARY KEY (degree_id),
    CONSTRAINT uq_degree_name UNIQUE (degree_name),
    CONSTRAINT uq_degree_name_friendly UNIQUE (degree_name_friendly),
    CONSTRAINT fk_degree_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_degree_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.degree IS 'Represents specific academic degrees (e.g., Bachelor of Science, Master of Arts), with unique friendly names and full audit fields.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.degree.degree_id IS 'Primary key.';
COMMENT ON COLUMN app.degree.degree_name IS 'Official name of the academic degree (unique).';
COMMENT ON COLUMN app.degree.degree_name_friendly IS 'User-friendly display name for the degree (unique).';
COMMENT ON COLUMN app.degree.created_by IS 'FK to app.user_login; identifies the user who created this record.';
COMMENT ON COLUMN app.degree.created_on IS 'Timestamp when the degree record was created.';
COMMENT ON COLUMN app.degree.modified_by IS 'FK to app.user_login; identifies the user who last modified this record.';
COMMENT ON COLUMN app.degree.modified_on IS 'Timestamp of the most recent modification.';


-------------------------------------


CREATE TABLE IF NOT EXISTS app.email_verification (
    email_verification_id  SERIAL,
    user_login_id          INTEGER NOT NULL,
    verification_token     VARCHAR(256) NOT NULL,
    requested_on           TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    verified_on            TIMESTAMPTZ,
    is_verified            BOOLEAN NOT NULL DEFAULT FALSE,
    is_active              BOOLEAN NOT NULL DEFAULT TRUE,
    created_by             INTEGER NOT NULL,
    created_on             TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by            INTEGER,
    modified_on            TIMESTAMPTZ,

    -- Constraints (all named)
    CONSTRAINT pk_email_verification_id PRIMARY KEY (email_verification_id),
    CONSTRAINT fk_email_verification_user_login_id FOREIGN KEY (user_login_id) REFERENCES app.user_login(user_login_id) ON DELETE CASCADE,
    CONSTRAINT uq_email_verification_token UNIQUE (verification_token),
    CONSTRAINT fk_email_verification_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_email_verification_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.email_verification IS 'Tracks email verification tokens, requested/verified status, and auditing info for user accounts.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.email_verification.email_verification_id IS 'Primary key.';
COMMENT ON COLUMN app.email_verification.user_login_id IS 'FK to app.user_login; identifies the user being verified.';
COMMENT ON COLUMN app.email_verification.verification_token IS 'Unique verification token sent to user.';
COMMENT ON COLUMN app.email_verification.requested_on IS 'Timestamp when verification was requested.';
COMMENT ON COLUMN app.email_verification.verified_on IS 'Timestamp when email was verified (nullable).';
COMMENT ON COLUMN app.email_verification.is_verified IS 'TRUE if the email is verified.';
COMMENT ON COLUMN app.email_verification.is_active IS 'TRUE if this verification process is currently valid.';
COMMENT ON COLUMN app.email_verification.created_by IS 'FK to app.user_login; who created this record.';
COMMENT ON COLUMN app.email_verification.created_on IS 'Creation timestamp.';
COMMENT ON COLUMN app.email_verification.modified_by IS 'FK to app.user_login; who last modified this record.';
COMMENT ON COLUMN app.email_verification.modified_on IS 'Modification timestamp.';


-------------

CREATE TABLE IF NOT EXISTS app.exam_day (
    exam_day_id           SERIAL,
    day_name              VARCHAR(20) NOT NULL,
    day_name_friendly     VARCHAR(20) NOT NULL,
    created_by            INTEGER NOT NULL,
    created_on            TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by           INTEGER,
    modified_on           TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_exam_day_id PRIMARY KEY (exam_day_id),
    CONSTRAINT uq_day_name UNIQUE (day_name),
    CONSTRAINT uq_day_name_friendly UNIQUE (day_name_friendly),
    CONSTRAINT fk_exam_day_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_exam_day_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.exam_day IS 'Represents the day of the ENEM exam (e.g., First day, Second day), supporting friendly names and auditing.';

-- Field comments
COMMENT ON COLUMN app.exam_day.exam_day_id IS 'Primary key.';
COMMENT ON COLUMN app.exam_day.day_name IS 'Official name of the exam day (unique).';
COMMENT ON COLUMN app.exam_day.day_name_friendly IS 'User-friendly display name for the exam day (unique).';
COMMENT ON COLUMN app.exam_day.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.exam_day.created_on IS 'Timestamp of record creation.';
COMMENT ON COLUMN app.exam_day.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.exam_day.modified_on IS 'Timestamp of the most recent modification.';



CREATE TABLE IF NOT EXISTS app.exam_question (
    exam_question_id         SERIAL,
    question_number          INTEGER,
    question_text            VARCHAR(255),
    image_path               VARCHAR(255),
    alternative_a            VARCHAR(255),
    alternative_b            VARCHAR(255),
    alternative_c            VARCHAR(255),
    alternative_d            VARCHAR(255),
    alternative_e            VARCHAR(255),
    correct_alternative      CHAR(1),
    area_id                  INTEGER,
    booklet_color_id         INTEGER,
    exam_day_id              INTEGER,
    exam_year_id             INTEGER,
    language_id              INTEGER,
    subtopic_id              INTEGER,
    subject_id               INTEGER,
    topic_id                 INTEGER,

    alternative_a_extra      VARCHAR(255),
    alternative_b_extra      VARCHAR(255),
    alternative_c_extra      VARCHAR(255),
    alternative_d_extra      VARCHAR(255),
    alternative_e_extra      VARCHAR(255),

    created_by               INTEGER,
    created_on               TIMESTAMPTZ DEFAULT NOW(),
    modified_by              INTEGER,
    modified_on              TIMESTAMPTZ,

    CONSTRAINT pk_exam_question_id PRIMARY KEY (exam_question_id),
    CONSTRAINT uq_exam_question_unique UNIQUE (
        question_number, 
        booklet_color_id, 
        exam_day_id, 
        exam_year_id, 
        language_id
    ),

    CONSTRAINT fk_exam_question_area_id FOREIGN KEY (area_id) REFERENCES app.area(area_id),
    CONSTRAINT fk_exam_question_booklet_color_id FOREIGN KEY (booklet_color_id) REFERENCES app.booklet_color(booklet_color_id),
    CONSTRAINT fk_exam_question_exam_day_id FOREIGN KEY (exam_day_id) REFERENCES app.exam_day(exam_day_id),
    CONSTRAINT fk_exam_question_exam_year_id FOREIGN KEY (exam_year_id) REFERENCES app.exam_year(exam_year_id),
    CONSTRAINT fk_exam_question_language_id FOREIGN KEY (language_id) REFERENCES app.language(language_id),
    CONSTRAINT fk_exam_question_subject_id FOREIGN KEY (subject_id) REFERENCES app.subject(subject_id),
    CONSTRAINT fk_exam_question_topic_id FOREIGN KEY (topic_id) REFERENCES app.topic(topic_id),
    CONSTRAINT fk_exam_question_subtopic_id FOREIGN KEY (subtopic_id) REFERENCES app.subtopic(subtopic_id),
    CONSTRAINT fk_exam_question_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_exam_question_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

COMMENT ON TABLE app.exam_question IS 'Stores ENEM exam questions, including references to color, day, year, language, area, subject, topic, subtopic, and auditing.';

COMMENT ON COLUMN app.exam_question.exam_question_id IS 'Primary key.';
COMMENT ON COLUMN app.exam_question.question_number IS 'Number of the question in the exam.';
COMMENT ON COLUMN app.exam_question.question_text IS 'Full text/enunciation of the question.';
COMMENT ON COLUMN app.exam_question.image_path IS 'Filesystem path or URL to associated question image.';
COMMENT ON COLUMN app.exam_question.alternative_a IS 'Text of alternative A.';
COMMENT ON COLUMN app.exam_question.alternative_b IS 'Text of alternative B.';
COMMENT ON COLUMN app.exam_question.alternative_c IS 'Text of alternative C.';
COMMENT ON COLUMN app.exam_question.alternative_d IS 'Text of alternative D.';
COMMENT ON COLUMN app.exam_question.alternative_e IS 'Text of alternative E.';
COMMENT ON COLUMN app.exam_question.correct_alternative IS 'Correct alternative for the question (A-E).';
COMMENT ON COLUMN app.exam_question.area_id IS 'FK to app.area; the high-level ENEM exam area for the question.';
COMMENT ON COLUMN app.exam_question.booklet_color_id IS 'FK to app.exam_booklet_color; identifies the exam booklet color.';
COMMENT ON COLUMN app.exam_question.exam_day_id IS 'FK to app.exam_day; identifies the exam day.';
COMMENT ON COLUMN app.exam_question.exam_year_id IS 'FK to app.exam_year; identifies the exam year.';
COMMENT ON COLUMN app.exam_question.language_id IS 'FK to app.language; identifies the language of the question.';
COMMENT ON COLUMN app.exam_question.subject_id IS 'FK to app.subject; identifies the subject for the question.';
COMMENT ON COLUMN app.exam_question.topic_id IS 'FK to app.topic; identifies the topic for the question.';
COMMENT ON COLUMN app.exam_question.subtopic_id IS 'FK to app.subtopic; identifies the subtopic for the question.';
COMMENT ON COLUMN app.exam_question.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.exam_question.created_on IS 'Timestamp of record creation.';
COMMENT ON COLUMN app.exam_question.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.exam_question.modified_on IS 'Timestamp of the most recent modification.';

COMMENT ON COLUMN app.exam_question.alternative_a_extra IS 'Additional data for alternative A (e.g. image path, HTML, vector)';
COMMENT ON COLUMN app.exam_question.alternative_b_extra IS 'Additional data for alternative B (e.g. image path, HTML, vector)';
COMMENT ON COLUMN app.exam_question.alternative_c_extra IS 'Additional data for alternative C (e.g. image path, HTML, vector)';
COMMENT ON COLUMN app.exam_question.alternative_d_extra IS 'Additional data for alternative D (e.g. image path, HTML, vector)';
COMMENT ON COLUMN app.exam_question.alternative_e_extra IS 'Additional data for alternative E (e.g. image path, HTML, vector)';



-----------------------------------------

CREATE TABLE IF NOT EXISTS app.exam_year (
    exam_year_id        SERIAL,
    exam_year           INTEGER NOT NULL,
    year_name           VARCHAR(50) NOT NULL,
    year_name_friendly  VARCHAR(50) NOT NULL,
    created_by          INTEGER NOT NULL,
    created_on          TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by         INTEGER,
    modified_on         TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_exam_year_id PRIMARY KEY (exam_year_id),
    CONSTRAINT uq_exam_year_name UNIQUE (year_name),
    CONSTRAINT uq_exam_year_name_friendly UNIQUE (year_name_friendly),
    CONSTRAINT fk_exam_year_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_exam_year_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.exam_year IS 'Represents the year of the ENEM exam, supporting friendly names and auditing.';

-- Field comments
COMMENT ON COLUMN app.exam_year.exam_year_id IS 'Primary key.';
COMMENT ON COLUMN app.exam_year.year_name IS 'Official year value (unique).';
COMMENT ON COLUMN app.exam_year.year_name_friendly IS 'User-friendly display name for the exam year (unique).';
COMMENT ON COLUMN app.exam_year.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.exam_year.created_on IS 'Timestamp of record creation.';
COMMENT ON COLUMN app.exam_year.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.exam_year.modified_on IS 'Timestamp of the most recent modification.';
COMMENT ON COLUMN app.exam_year.exam_year IS 'The year of the ENEM exam represented by this record.';

-------------------------------------

CREATE TABLE IF NOT EXISTS app.frequency (
    frequency_id               SERIAL,
    frequency_name             VARCHAR(50) NOT NULL,
    frequency_name_friendly    VARCHAR(50) NOT NULL,
    created_by                 INTEGER NOT NULL,
    created_on                 TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by                INTEGER,
    modified_on                TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_frequency_id PRIMARY KEY (frequency_id),
    CONSTRAINT uq_frequency_name UNIQUE (frequency_name),
    CONSTRAINT uq_frequency_name_friendly UNIQUE (frequency_name_friendly),
    CONSTRAINT fk_frequency_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_frequency_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.frequency IS 'Represents possible frequency values for scheduling, attendance, or reporting (e.g., daily, weekly), with friendly names and audit fields.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.frequency.frequency_id IS 'Primary key.';
COMMENT ON COLUMN app.frequency.frequency_name IS 'Official name of the frequency (unique).';
COMMENT ON COLUMN app.frequency.frequency_name_friendly IS 'User-friendly display name for the frequency (unique).';
COMMENT ON COLUMN app.frequency.created_by IS 'FK to app.user_login; identifies the user who created this record.';
COMMENT ON COLUMN app.frequency.created_on IS 'Timestamp when the frequency record was created.';
COMMENT ON COLUMN app.frequency.modified_by IS 'FK to app.user_login; identifies the user who last modified this record.';
COMMENT ON COLUMN app.frequency.modified_on IS 'Timestamp of the most recent modification.';

------------------------------------

CREATE TABLE IF NOT EXISTS app.password_reset (
    password_reset_id     SERIAL,
    user_login_id         INTEGER NOT NULL,
    reset_token           VARCHAR(255) NOT NULL,
    requested_on          TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    used_on               TIMESTAMPTZ,
    is_used               BOOLEAN NOT NULL DEFAULT FALSE,
    is_active             BOOLEAN NOT NULL DEFAULT TRUE,
    created_by            INTEGER NOT NULL,
    created_on            TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by           INTEGER,
    modified_on           TIMESTAMPTZ,

    -- Constraints (all named)
    CONSTRAINT pk_password_reset_id PRIMARY KEY (password_reset_id),
    CONSTRAINT fk_password_reset_user_login_id FOREIGN KEY (user_login_id) REFERENCES app.user_login(user_login_id) ON DELETE CASCADE,
    CONSTRAINT uq_password_reset_token UNIQUE (reset_token),
    CONSTRAINT fk_password_reset_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_password_reset_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.password_reset IS 'Handles password reset requests for user accounts, with secure tokens and audit fields.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.password_reset.password_reset_id IS 'Primary key.';
COMMENT ON COLUMN app.password_reset.user_login_id IS 'FK to app.user_login.';
COMMENT ON COLUMN app.password_reset.reset_token IS 'Unique, secure token for password reset.';
COMMENT ON COLUMN app.password_reset.requested_on IS 'Timestamp when reset was requested.';
COMMENT ON COLUMN app.password_reset.used_on IS 'Timestamp when reset was completed/used.';
COMMENT ON COLUMN app.password_reset.is_used IS 'TRUE if this token has already been used.';
COMMENT ON COLUMN app.password_reset.is_active IS 'TRUE if token is currently valid.';
COMMENT ON COLUMN app.password_reset.created_by IS 'FK to app.user_login; who created this record.';
COMMENT ON COLUMN app.password_reset.created_on IS 'Creation timestamp.';
COMMENT ON COLUMN app.password_reset.modified_by IS 'FK to app.user_login; who last modified this record.';
COMMENT ON COLUMN app.password_reset.modified_on IS 'Modification timestamp.';

-------------------------

CREATE TABLE IF NOT EXISTS app.language (
    language_id            SERIAL,
    language_name          VARCHAR(20),
    language_name_friendly VARCHAR(20),
    created_by             INTEGER NOT NULL,
    created_on             TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by            INTEGER,
    modified_on            TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_language_id PRIMARY KEY (language_id),
    CONSTRAINT uq_language_name UNIQUE (language_name),
    CONSTRAINT uq_language_name_friendly UNIQUE (language_name_friendly),
    CONSTRAINT fk_language_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_language_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

COMMENT ON TABLE app.language IS 'Represents the language used in the exam, with friendly names and auditing.';

COMMENT ON COLUMN app.language.language_id IS 'Primary key.';
COMMENT ON COLUMN app.language.language_name IS 'Official language name (unique).';
COMMENT ON COLUMN app.language.language_name_friendly IS 'User-friendly display name for the language (unique).';
COMMENT ON COLUMN app.language.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.language.created_on IS 'Timestamp of record creation.';
COMMENT ON COLUMN app.language.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.language.modified_on IS 'Timestamp of the most recent modification.';

--------------------------------------

CREATE TABLE IF NOT EXISTS app.quota_type (
    quota_type_id            SERIAL,
    quota_type_code          VARCHAR(50) NOT NULL,
    quota_type_desc_pt       VARCHAR(255) NOT NULL,
    quota_type_desc_short_pt VARCHAR(100) NOT NULL,
    quota_explain            VARCHAR(255) NOT NULL,
    created_by               INTEGER NOT NULL DEFAULT 1,  -- system user_login_id or assign as needed
    created_on               TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by              INTEGER,
    modified_on              TIMESTAMPTZ,
    CONSTRAINT pk_quota_type_id PRIMARY KEY (quota_type_id),
    CONSTRAINT uq_quota_type_code UNIQUE (quota_type_code),
    CONSTRAINT uq_quota_type_short UNIQUE (quota_type_desc_short_pt),
    CONSTRAINT fk_quota_type_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_quota_type_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.quota_type IS 'Defines quota or affirmative action types, with detailed and short Portuguese descriptions, explanation, and audit fields.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.quota_type.quota_type_id IS 'Primary key.';
COMMENT ON COLUMN app.quota_type.quota_type_code IS 'Unique code identifying the quota type.';
COMMENT ON COLUMN app.quota_type.quota_type_desc_pt IS 'Full description of the quota type in Portuguese.';
COMMENT ON COLUMN app.quota_type.quota_type_desc_short_pt IS 'Short description of the quota type in Portuguese.';
COMMENT ON COLUMN app.quota_type.quota_explain IS 'Text explanation of how this quota type works.';
COMMENT ON COLUMN app.quota_type.created_by IS 'FK to app.user_login; user who created this record (default: system).';
COMMENT ON COLUMN app.quota_type.created_on IS 'Timestamp when the record was created.';
COMMENT ON COLUMN app.quota_type.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.quota_type.modified_on IS 'Timestamp of last modification.';

---------------------------------------

CREATE TABLE IF NOT EXISTS app.school_year (
    school_year_id         SERIAL,
    school_year_name       VARCHAR(250) NOT NULL,
    school_year_name_friendly VARCHAR(250) NOT NULL,
    created_by             INTEGER NOT NULL,
    created_on             TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by            INTEGER,
    modified_on            TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_school_year_id PRIMARY KEY (school_year_id),
    CONSTRAINT uq_school_year_name UNIQUE (school_year_name),
    CONSTRAINT uq_school_year_name_friendly UNIQUE (school_year_name_friendly),
    CONSTRAINT fk_school_year_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_school_year_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.school_year IS 'Represents a school grade/year (e.g., 6th grade, 1st year of high school), supporting friendly names and auditing.';

-- Field comments
COMMENT ON COLUMN app.school_year.school_year_id IS 'Primary key.';
COMMENT ON COLUMN app.school_year.school_year_name IS 'Official name of the school year (unique).';
COMMENT ON COLUMN app.school_year.school_year_name_friendly IS 'User-friendly display name for the school year (unique).';
COMMENT ON COLUMN app.school_year.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.school_year.created_on IS 'Timestamp of record creation.';
COMMENT ON COLUMN app.school_year.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.school_year.modified_on IS 'Timestamp of the most recent modification.';



----------------


CREATE TABLE IF NOT EXISTS app.shift (
    shift_id                SERIAL,
    shift_name              VARCHAR(255) NOT NULL,
    shift_name_friendly     VARCHAR(255) NOT NULL,
    created_by              INTEGER NOT NULL,
    created_on              TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by             INTEGER,
    modified_on             TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_shift_id PRIMARY KEY (shift_id),
    CONSTRAINT uq_shift_name UNIQUE (shift_name),
    CONSTRAINT uq_shift_name_friendly UNIQUE (shift_name_friendly),
    CONSTRAINT fk_shift_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_shift_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.shift IS 'Defines academic shift or session types (e.g., morning, evening) with friendly names and audit information.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.shift.shift_id IS 'Primary key.';
COMMENT ON COLUMN app.shift.shift_name IS 'Official name of the shift (unique).';
COMMENT ON COLUMN app.shift.shift_name_friendly IS 'User-friendly display name for the shift (unique).';
COMMENT ON COLUMN app.shift.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.shift.created_on IS 'Timestamp when the record was created.';
COMMENT ON COLUMN app.shift.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.shift.modified_on IS 'Timestamp of the most recent modification.';


---------------------
CREATE TABLE IF NOT EXISTS app.special_quota (
    special_quota_id         SERIAL,
    quota_type_id            INTEGER NOT NULL,
    special_quota_desc_pt    VARCHAR(250) NOT NULL,
    special_quota_desc_short VARCHAR(100) NOT NULL,
    quota_explain            VARCHAR(255) NOT NULL,
    created_by               INTEGER NOT NULL DEFAULT 1,  -- system user_login_id or adjust as needed
    created_on               TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by              INTEGER,
    modified_on              TIMESTAMPTZ,

    CONSTRAINT pk_special_quota_id PRIMARY KEY (special_quota_id),
    CONSTRAINT fk_special_quota_quota_type_id FOREIGN KEY (quota_type_id) REFERENCES app.quota_type (quota_type_id),
    CONSTRAINT uq_special_quota_desc_short UNIQUE (special_quota_desc_short),
    CONSTRAINT fk_special_quota_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_special_quota_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.special_quota IS 'Defines special quota categories linked to quota types, with descriptions, explanations, and audit fields.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.special_quota.special_quota_id IS 'Primary key.';
COMMENT ON COLUMN app.special_quota.quota_type_id IS 'FK to app.quota_type; the parent quota type.';
COMMENT ON COLUMN app.special_quota.special_quota_desc_pt IS 'Full Portuguese description of the special quota.';
COMMENT ON COLUMN app.special_quota.special_quota_desc_short IS 'Short Portuguese description, unique.';
COMMENT ON COLUMN app.special_quota.quota_explain IS 'Explanation of the special quota rules or usage.';
COMMENT ON COLUMN app.special_quota.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.special_quota.created_on IS 'Timestamp when the record was created.';
COMMENT ON COLUMN app.special_quota.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.special_quota.modified_on IS 'Timestamp of last modification.';

--------------------------
CREATE TABLE app.student_ability_estimation (
    estimation_id          SERIAL PRIMARY KEY,
    student_id             INTEGER NOT NULL,            -- FK to your user/student table
    year_id                INTEGER NOT NULL REFERENCES app.year(year_id),
    exam_day               SMALLINT NOT NULL,
    subject                TEXT NOT NULL,               -- e.g., 'Math', 'Humanities'
    theta                  NUMERIC(8,5) NOT NULL,       -- Ability estimate (latent trait)
    standard_error         NUMERIC(8,5),                -- Standard error of theta estimate
    estimation_method      TEXT NOT NULL,               -- e.g., 'MLE', 'Bayesian', 'EAP'
    response_pattern       TEXT,                         -- Optionally store student's answers pattern (mapped)
    created_by             INTEGER NOT NULL,
    created_on             TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by            INTEGER,
    modified_on            TIMESTAMPTZ,

    CONSTRAINT fk_student_ability_estimation_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_student_ability_estimation_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.student_ability_estimation IS 'Stores ability estimation results for students per year, exam day, subject, with method and audit info.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.student_ability_estimation.estimation_id IS 'Primary key.';
COMMENT ON COLUMN app.student_ability_estimation.student_id IS 'FK to user/student table identifying the student.';
COMMENT ON COLUMN app.student_ability_estimation.year_id IS 'FK to app.year; exam year.';
COMMENT ON COLUMN app.student_ability_estimation.exam_day IS 'Exam day number.';
COMMENT ON COLUMN app.student_ability_estimation.subject IS 'Subject area (e.g., Math, Humanities).';
COMMENT ON COLUMN app.student_ability_estimation.theta IS 'Estimated ability score (latent trait).';
COMMENT ON COLUMN app.student_ability_estimation.standard_error IS 'Standard error of the theta estimate.';
COMMENT ON COLUMN app.student_ability_estimation.estimation_method IS 'Method used for ability estimation.';
COMMENT ON COLUMN app.student_ability_estimation.response_pattern IS 'Optional mapped pattern of student responses.';
COMMENT ON COLUMN app.student_ability_estimation.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.student_ability_estimation.created_on IS 'Timestamp when the record was created.';
COMMENT ON COLUMN app.student_ability_estimation.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.student_ability_estimation.modified_on IS 'Timestamp of last modification.';


--------------
CREATE TABLE IF NOT EXISTS app.subject (
    subject_id             SERIAL,
    subject_name           VARCHAR(255) NOT NULL,
    subject_name_friendly  VARCHAR(255) NOT NULL,
    created_by             INTEGER NOT NULL,
    created_on             TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by            INTEGER,
    modified_on            TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_subject_id PRIMARY KEY (subject_id),
    CONSTRAINT uq_subject_name UNIQUE (subject_name),
    CONSTRAINT uq_subject_name_friendly UNIQUE (subject_name_friendly),
    CONSTRAINT fk_subject_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_subject_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.subject IS 'Represents a high-level school subject (e.g., Mathematics, Languages), supporting friendly names and auditing.';

-- Field comments
COMMENT ON COLUMN app.subject.subject_id IS 'Primary key.';
COMMENT ON COLUMN app.subject.subject_name IS 'Official name of the subject (unique).';
COMMENT ON COLUMN app.subject.subject_name_friendly IS 'User-friendly display name for the subject (unique).';
COMMENT ON COLUMN app.subject.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.subject.created_on IS 'Timestamp of record creation.';
COMMENT ON COLUMN app.subject.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.subject.modified_on IS 'Timestamp of the most recent modification.';


----------------------------------
CREATE TABLE IF NOT EXISTS app.submission_deadline (
    submission_deadline_id   SERIAL,
    year_id                  INTEGER NOT NULL,
    exam_day                 SMALLINT NOT NULL,
    deadline                 TIMESTAMPTZ NOT NULL,
    created_by               INTEGER NOT NULL,
    created_on               TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by              INTEGER,
    modified_on              TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_submission_deadline_id PRIMARY KEY (submission_deadline_id),
    CONSTRAINT fk_submission_deadline_year_id FOREIGN KEY (year_id) REFERENCES app.year(year_id),
    CONSTRAINT fk_submission_deadline_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_submission_deadline_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT uq_submission_deadline_year_day UNIQUE (year_id, exam_day)
);

-- Table comment
COMMENT ON TABLE app.submission_deadline IS 'Stores deadlines for exam answer submissions by year and exam day, with audit information.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.submission_deadline.submission_deadline_id IS 'Primary key.';
COMMENT ON COLUMN app.submission_deadline.year_id IS 'FK to app.year; exam year.';
COMMENT ON COLUMN app.submission_deadline.exam_day IS 'Exam day number.';
COMMENT ON COLUMN app.submission_deadline.deadline IS 'Deadline timestamp for submissions.';
COMMENT ON COLUMN app.submission_deadline.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.submission_deadline.created_on IS 'Timestamp when the record was created.';
COMMENT ON COLUMN app.submission_deadline.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.submission_deadline.modified_on IS 'Timestamp of last modification.';

---------------------

CREATE TABLE IF NOT EXISTS app.subtopic_school_year (
    subtopic_id        INTEGER NOT NULL,
    school_year_id     INTEGER NOT NULL,
    created_by         INTEGER NOT NULL,
    created_on         TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by        INTEGER,
    modified_on        TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_subtopic_school_year PRIMARY KEY (subtopic_id, school_year_id),
    CONSTRAINT fk_ssy_subtopic_id FOREIGN KEY (subtopic_id) REFERENCES app.subtopic(subtopic_id) ON DELETE CASCADE,
    CONSTRAINT fk_ssy_school_year_id FOREIGN KEY (school_year_id) REFERENCES app.school_year(school_year_id) ON DELETE CASCADE,
    CONSTRAINT fk_ssy_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_ssy_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.subtopic_school_year IS 'Associates subtopics with school years (grades), supporting auditing. Enables each subtopic to be linked to multiple years, and each year to multiple subtopics.';

-- Field comments
COMMENT ON COLUMN app.subtopic_school_year.subtopic_id IS 'FK to app.subtopic; identifies the subtopic.';
COMMENT ON COLUMN app.subtopic_school_year.school_year_id IS 'FK to app.school_year; identifies the school year/grade.';
COMMENT ON COLUMN app.subtopic_school_year.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.subtopic_school_year.created_on IS 'Timestamp of record creation.';
COMMENT ON COLUMN app.subtopic_school_year.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.subtopic_school_year.modified_on IS 'Timestamp of the most recent modification.';


------------------------------

CREATE TABLE IF NOT EXISTS app.subtopic (
    subtopic_id               SERIAL,
    topic_id                  INTEGER NOT NULL,
    subtopic_name             VARCHAR(255) NOT NULL,
    subtopic_name_friendly    VARCHAR(255) NOT NULL,
    created_by                INTEGER NOT NULL,
    created_on                TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by               INTEGER,
    modified_on               TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_subtopic_id PRIMARY KEY (subtopic_id),
    CONSTRAINT fk_subtopic_topic_id FOREIGN KEY (topic_id) REFERENCES app.topic(topic_id) ON DELETE CASCADE,
    CONSTRAINT uq_subtopic_topic_name UNIQUE (topic_id, subtopic_name),
    CONSTRAINT uq_subtopic_topic_name_friendly UNIQUE (topic_id, subtopic_name_friendly),
    CONSTRAINT fk_subtopic_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_subtopic_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.subtopic IS 'Represents a subtopic within a topic (e.g., Logarithms in Algebra), supporting friendly names and auditing.';

-- Field comments
COMMENT ON COLUMN app.subtopic.subtopic_id IS 'Primary key.';
COMMENT ON COLUMN app.subtopic.topic_id IS 'FK to app.topic; identifies the topic to which the subtopic belongs.';
COMMENT ON COLUMN app.subtopic.subtopic_name IS 'Official name of the subtopic (unique within topic).';
COMMENT ON COLUMN app.subtopic.subtopic_name_friendly IS 'User-friendly display name for the subtopic (unique within topic).';
COMMENT ON COLUMN app.subtopic.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.subtopic.created_on IS 'Timestamp of record creation.';
COMMENT ON COLUMN app.subtopic.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.subtopic.modified_on IS 'Timestamp of the most recent modification.';

---------------------------

CREATE TABLE IF NOT EXISTS app.terms_acceptance (
    terms_acceptance_id  SERIAL,
    user_login_id        INTEGER NOT NULL,
    terms_version        VARCHAR(50) NOT NULL,       -- E.g. "2024-06", "v1.0", etc.
    accepted_on          TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    accepted_by          INTEGER NOT NULL,    -- FK to user_login who accepted
    is_active            BOOLEAN NOT NULL DEFAULT TRUE,
    created_by           INTEGER NOT NULL,
    created_on           TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by          INTEGER,
    modified_on          TIMESTAMPTZ,

    -- Constraints (all named)
    CONSTRAINT pk_terms_acceptance_id PRIMARY KEY (terms_acceptance_id),
    CONSTRAINT fk_terms_acceptance_user_login_id FOREIGN KEY (user_login_id) REFERENCES app.user_login(user_login_id) ON DELETE CASCADE,
    CONSTRAINT fk_terms_acceptance_accepted_by FOREIGN KEY (accepted_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_terms_acceptance_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_terms_acceptance_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.terms_acceptance IS 'Tracks when a user account accepts Terms of Service and/or Privacy Policy, including version.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.terms_acceptance.terms_acceptance_id IS 'Primary key.';
COMMENT ON COLUMN app.terms_acceptance.user_login_id IS 'FK to app.user_login; user who accepted the terms.';
COMMENT ON COLUMN app.terms_acceptance.terms_version IS 'Version of the terms/policy accepted.';
COMMENT ON COLUMN app.terms_acceptance.accepted_on IS 'Timestamp when user accepted the terms.';
COMMENT ON COLUMN app.terms_acceptance.accepted_by IS 'FK to app.user_login; user who accepted the terms.';
COMMENT ON COLUMN app.terms_acceptance.is_active IS 'TRUE if this record is the most current acceptance.';
COMMENT ON COLUMN app.terms_acceptance.created_by IS 'FK to app.user_login; who created this record.';
COMMENT ON COLUMN app.terms_acceptance.created_on IS 'Creation timestamp.';
COMMENT ON COLUMN app.terms_acceptance.modified_by IS 'FK to app.user_login; who last modified this record.';
COMMENT ON COLUMN app.terms_acceptance.modified_on IS 'Modification timestamp.';

CREATE TABLE IF NOT EXISTS app.topic (
    topic_id               SERIAL,
    subject_id             INTEGER NOT NULL,
    topic_name             VARCHAR(50) NOT NULL,
    topic_name_friendly    VARCHAR(50) NOT NULL,
    created_by             INTEGER NOT NULL,
    created_on             TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by            INTEGER,
    modified_on            TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_topic_id PRIMARY KEY (topic_id),
    CONSTRAINT fk_topic_subject_id FOREIGN KEY (subject_id) REFERENCES app.subject(subject_id) ON DELETE CASCADE,
    CONSTRAINT uq_topic_subject_name UNIQUE (subject_id, topic_name),
    CONSTRAINT uq_topic_subject_name_friendly UNIQUE (subject_id, topic_name_friendly),
    CONSTRAINT fk_topic_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_topic_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.topic IS 'Represents a topic within a subject (e.g., Algebra in Mathematics), supporting friendly names and auditing.';

-- Field comments
COMMENT ON COLUMN app.topic.topic_id IS 'Primary key.';
COMMENT ON COLUMN app.topic.subject_id IS 'FK to app.subject; identifies the subject to which the topic belongs.';
COMMENT ON COLUMN app.topic.topic_name IS 'Official name of the topic (unique within subject).';
COMMENT ON COLUMN app.topic.topic_name_friendly IS 'User-friendly display name for the topic (unique within subject).';
COMMENT ON COLUMN app.topic.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.topic.created_on IS 'Timestamp of record creation.';
COMMENT ON COLUMN app.topic.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.topic.modified_on IS 'Timestamp of the most recent modification.';


------------------

CREATE TABLE IF NOT EXISTS app.university_campus (
    university_campus_id              SERIAL,
    university_campus_name            VARCHAR(50) NOT NULL,
    university_campus_name_friendly  VARCHAR(50) NOT NULL,
    created_by                       INTEGER NOT NULL,
    created_on                       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by                      INTEGER,
    modified_on                      TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_university_campus_id PRIMARY KEY (university_campus_id),
    CONSTRAINT uq_university_campus_name UNIQUE (university_campus_name),
    CONSTRAINT uq_university_campus_name_friendly UNIQUE (university_campus_name_friendly),
    CONSTRAINT fk_university_campus_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_university_campus_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.university_campus IS 'Stores university campus names with friendly display names and audit information.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.university_campus.university_campus_id IS 'Primary key.';
COMMENT ON COLUMN app.university_campus.university_campus_name IS 'Official university campus name (unique).';
COMMENT ON COLUMN app.university_campus.university_campus_name_friendly IS 'User-friendly display name for the campus (unique).';
COMMENT ON COLUMN app.university_campus.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.university_campus.created_on IS 'Timestamp when the record was created.';
COMMENT ON COLUMN app.university_campus.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.university_campus.modified_on IS 'Timestamp of the most recent modification.';


----------------------

CREATE TABLE IF NOT EXISTS app.university_category (
    university_category_id             SERIAL,
    university_category_name           VARCHAR(255) NOT NULL,
    university_category_name_friendly  VARCHAR(255) NOT NULL,
    created_by                         INTEGER NOT NULL,
    created_on                         TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by                        INTEGER,
    modified_on                        TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_university_category_id PRIMARY KEY (university_category_id),
    CONSTRAINT uq_university_category_name UNIQUE (university_category_name),
    CONSTRAINT uq_university_category_name_friendly UNIQUE (university_category_name_friendly),
    CONSTRAINT fk_university_category_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_university_category_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.university_category IS 'Defines categories/types of universities with friendly names and audit fields.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.university_category.university_category_id IS 'Primary key.';
COMMENT ON COLUMN app.university_category.university_category_name IS 'Official name of the university category (unique).';
COMMENT ON COLUMN app.university_category.university_category_name_friendly IS 'User-friendly display name for the university category (unique).';
COMMENT ON COLUMN app.university_category.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.university_category.created_on IS 'Timestamp when the record was created.';
COMMENT ON COLUMN app.university_category.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.university_category.modified_on IS 'Timestamp of the most recent modification.';

------------------

CREATE TABLE IF NOT EXISTS app.university (
    university_id            SERIAL,
    university_code          INT NOT NULL,
    university_name          VARCHAR(100) NOT NULL,
    university_abbr          VARCHAR(10) NOT NULL,
    university_name_friendly VARCHAR(100) NOT NULL,
    created_by               INTEGER NOT NULL,
    created_on               TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by              INTEGER,
    modified_on              TIMESTAMPTZ,

    -- Constraints (all named)
    CONSTRAINT pk_university_id PRIMARY KEY (university_id),
    CONSTRAINT uq_university_code UNIQUE (university_code),
    CONSTRAINT uq_university_name UNIQUE (university_name),
    CONSTRAINT uq_university_name_friendly UNIQUE (university_name_friendly),
    CONSTRAINT fk_university_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_university_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.university IS 'Stores universities with unique codes, full names, abbreviations, friendly names, and audit information.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.university.university_id IS 'Primary key.';
COMMENT ON COLUMN app.university.university_code IS 'Unique numeric code for the university.';
COMMENT ON COLUMN app.university.university_name IS 'Official university name (unique).';
COMMENT ON COLUMN app.university.university_abbr IS 'Official university abbreviation.';
COMMENT ON COLUMN app.university.university_name_friendly IS 'User-friendly display name for the university (unique).';
COMMENT ON COLUMN app.university.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.university.created_on IS 'Timestamp when the record was created.';
COMMENT ON COLUMN app.university.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.university.modified_on IS 'Timestamp of the most recent modification.';




---------------------


CREATE TABLE IF NOT EXISTS app.year (
    year_id              SERIAL,
    year                 SMALLINT NOT NULL,
    year_name            VARCHAR(40) NOT NULL,
    year_name_friendly   VARCHAR(40) NOT NULL,
    created_by           INTEGER NOT NULL,
    created_on           TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by          INTEGER,
    modified_on          TIMESTAMPTZ,

    -- Constraints (all named)
    CONSTRAINT pk_year_id PRIMARY KEY (year_id),
    CONSTRAINT uq_year UNIQUE (year),
    CONSTRAINT uq_year_name UNIQUE (year_name),
    CONSTRAINT uq_year_name_friendly UNIQUE (year_name_friendly),
    CONSTRAINT fk_year_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_year_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.year IS 'Stores exam years with friendly names and audit information.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.year.year_id IS 'Primary key.';
COMMENT ON COLUMN app.year.year IS 'Year number (e.g., 2024).';
COMMENT ON COLUMN app.year.year_name IS 'Official year name.';
COMMENT ON COLUMN app.year.year_name_friendly IS 'User-friendly year name for display.';
COMMENT ON COLUMN app.year.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.year.created_on IS 'Timestamp when the record was created.';
COMMENT ON COLUMN app.year.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.year.modified_on IS 'Timestamp of the last modification.';


-------

CREATE TABLE IF NOT EXISTS app.submission_deadline (
    submission_deadline_id   SERIAL,
    year_id                  INTEGER NOT NULL,
    exam_day                 SMALLINT NOT NULL,
    deadline                 TIMESTAMPTZ NOT NULL,
    created_by               INTEGER NOT NULL,
    created_on               TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by              INTEGER,
    modified_on              TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_submission_deadline_id PRIMARY KEY (submission_deadline_id),
    CONSTRAINT fk_submission_deadline_year_id FOREIGN KEY (year_id) REFERENCES app.year(year_id),
    CONSTRAINT fk_submission_deadline_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_submission_deadline_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT uq_submission_deadline_year_day UNIQUE (year_id, exam_day)
);

-- Table comment
COMMENT ON TABLE app.submission_deadline IS 'Stores deadlines for exam answer submissions by year and exam day, with audit information.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.submission_deadline.submission_deadline_id IS 'Primary key.';
COMMENT ON COLUMN app.submission_deadline.year_id IS 'FK to app.year; exam year.';
COMMENT ON COLUMN app.submission_deadline.exam_day IS 'Exam day number.';
COMMENT ON COLUMN app.submission_deadline.deadline IS 'Deadline timestamp for submissions.';
COMMENT ON COLUMN app.submission_deadline.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.submission_deadline.created_on IS 'Timestamp when the record was created.';
COMMENT ON COLUMN app.submission_deadline.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.submission_deadline.modified_on IS 'Timestamp of last modification.';



-----
CREATE TABLE IF NOT EXISTS app.subtopic_school_year (
    subtopic_id        INTEGER NOT NULL,
    school_year_id     INTEGER NOT NULL,
    created_by         INTEGER NOT NULL,
    created_on         TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by        INTEGER,
    modified_on        TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_subtopic_school_year PRIMARY KEY (subtopic_id, school_year_id),
    CONSTRAINT fk_ssy_subtopic_id FOREIGN KEY (subtopic_id) REFERENCES app.subtopic(subtopic_id) ON DELETE CASCADE,
    CONSTRAINT fk_ssy_school_year_id FOREIGN KEY (school_year_id) REFERENCES app.school_year(school_year_id) ON DELETE CASCADE,
    CONSTRAINT fk_ssy_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_ssy_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.subtopic_school_year IS 'Associates subtopics with school years (grades), supporting auditing. Enables each subtopic to be linked to multiple years, and each year to multiple subtopics.';

-- Field comments
COMMENT ON COLUMN app.subtopic_school_year.subtopic_id IS 'FK to app.subtopic; identifies the subtopic.';
COMMENT ON COLUMN app.subtopic_school_year.school_year_id IS 'FK to app.school_year; identifies the school year/grade.';
COMMENT ON COLUMN app.subtopic_school_year.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.subtopic_school_year.created_on IS 'Timestamp of record creation.';
COMMENT ON COLUMN app.subtopic_school_year.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.subtopic_school_year.modified_on IS 'Timestamp of the most recent modification.';



-------------------


CREATE TABLE IF NOT EXISTS app.response (
    response_id           SERIAL,
    exam_attempt_id       INTEGER NOT NULL,
    user_login_id         INTEGER NOT NULL,
    question_id           INTEGER NOT NULL,
    alternative_id        INTEGER NOT NULL,
    is_correct            BOOLEAN NOT NULL,
    flag_for_review       BOOLEAN NOT NULL DEFAULT FALSE,
    notes                 VARCHAR(500),
    notes_friendly        VARCHAR(500),
    created_by            INTEGER NOT NULL,
    created_on            TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by           INTEGER,
    modified_on           TIMESTAMPTZ,
    is_active             BOOLEAN NOT NULL DEFAULT TRUE,

    -- Constraints (all named)
    CONSTRAINT pk_response_id PRIMARY KEY (response_id),
    CONSTRAINT fk_response_exam_attempt_id FOREIGN KEY (exam_attempt_id) REFERENCES app.exam_attempt (exam_attempt_id) ON DELETE CASCADE,
    CONSTRAINT fk_response_user_login_id FOREIGN KEY (user_login_id) REFERENCES app.user_login (user_login_id) ON DELETE CASCADE,
    CONSTRAINT fk_response_question_id FOREIGN KEY (question_id) REFERENCES app.question (question_id) ON DELETE CASCADE,
    CONSTRAINT fk_response_alternative_id FOREIGN KEY (alternative_id) REFERENCES app.alternative (alternative_id) ON DELETE CASCADE,
    CONSTRAINT fk_response_created_by FOREIGN KEY (created_by) REFERENCES app.user_login (user_login_id),
    CONSTRAINT fk_response_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login (user_login_id),
    CONSTRAINT uq_response_per_attempt UNIQUE (exam_attempt_id, question_id)
);

-- Table comment
COMMENT ON TABLE app.response IS 'Stores user answers for each question and attempt, with review flag, notes, and audit fields.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.response.response_id IS 'Primary key.';
COMMENT ON COLUMN app.response.exam_attempt_id IS 'FK to exam attempt grouping responses.';
COMMENT ON COLUMN app.response.user_login_id IS 'FK to user_login (user account).';
COMMENT ON COLUMN app.response.question_id IS 'FK to app.question.';
COMMENT ON COLUMN app.response.alternative_id IS 'FK to selected app.alternative.';
COMMENT ON COLUMN app.response.is_correct IS 'TRUE if the selected answer was correct.';
COMMENT ON COLUMN app.response.flag_for_review IS 'TRUE if user flagged this question for review.';
COMMENT ON COLUMN app.response.notes IS 'Notes or comments for this response.';
COMMENT ON COLUMN app.response.notes_friendly IS 'Normalized notes for search.';
COMMENT ON COLUMN app.response.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.response.created_on IS 'Creation timestamp.';
COMMENT ON COLUMN app.response.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.response.modified_on IS 'Modification timestamp.';
COMMENT ON COLUMN app.response.is_active IS 'Active/archive flag.';


CREATE TABLE app.question (
    question_id            SERIAL,
    exam_year              INTEGER NOT NULL,
    booklet_color          TEXT NOT NULL,
    question_position      INTEGER NOT NULL,
    subject_area           TEXT NOT NULL,
    skill_code             TEXT NOT NULL,
    difficulty_tri         NUMERIC,
    thematic_area          TEXT,
    question_text          TEXT NOT NULL,
    image_url              TEXT,
    notes                  TEXT,
    created_by             INTEGER NOT NULL,
    created_on             TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by            INTEGER,
    modified_on            TIMESTAMPTZ,
    is_active              BOOLEAN NOT NULL DEFAULT TRUE,
    source_pdf_page        INTEGER,
    original_enem_code     TEXT,

    -- Constraints (all named)
    CONSTRAINT pk_question_id PRIMARY KEY (question_id),
    CONSTRAINT uq_question_per_booklet UNIQUE (exam_year, booklet_color, question_position),
    CONSTRAINT fk_question_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_question_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.question IS 'Stores ENEM questions, their metadata, and position within each exam/booklet.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.question.question_id IS 'Primary key.';
COMMENT ON COLUMN app.question.exam_year IS 'Year the exam was administered (e.g., 2024).';
COMMENT ON COLUMN app.question.booklet_color IS 'Booklet color version (e.g., Azul, Amarelo).';
COMMENT ON COLUMN app.question.question_position IS 'Order/position of the question in the test booklet.';
COMMENT ON COLUMN app.question.subject_area IS 'Subject area (e.g., Linguagens, Matemática, etc.).';
COMMENT ON COLUMN app.question.skill_code IS 'Skill code or competency reference as published by ENEM.';
COMMENT ON COLUMN app.question.difficulty_tri IS 'TRI-based difficulty score for the question.';
COMMENT ON COLUMN app.question.thematic_area IS 'Theme or subtopic of the question.';
COMMENT ON COLUMN app.question.question_text IS 'The full text of the question as presented on the exam.';
COMMENT ON COLUMN app.question.image_url IS 'URL to an associated image, if applicable.';
COMMENT ON COLUMN app.question.notes IS 'Free-form notes, comments, or tags.';
COMMENT ON COLUMN app.question.created_by IS 'FK to app.user_login; user who created the record.';
COMMENT ON COLUMN app.question.created_on IS 'Timestamp when the record was created.';
COMMENT ON COLUMN app.question.modified_by IS 'FK to app.user_login; user who last modified the record.';
COMMENT ON COLUMN app.question.modified_on IS 'Timestamp of the last modification.';
COMMENT ON COLUMN app.question.is_active IS 'Soft delete/archive flag.';
COMMENT ON COLUMN app.question.source_pdf_page IS 'Original PDF page number from the ENEM booklet.';
COMMENT ON COLUMN app.question.original_enem_code IS 'Official ENEM item code from microdados, if available.';



-----------------------


CREATE TABLE app.item_statistics (
    item_stat_id           SERIAL PRIMARY KEY,
    year_id                INTEGER NOT NULL REFERENCES app.year(year_id),
    exam_day               SMALLINT NOT NULL,
    subject                TEXT NOT NULL,                    -- e.g., 'Math', 'Humanities'
    base_question_no       INTEGER NOT NULL,                  -- Position in base booklet
    item_id                TEXT,                              -- Optional: official question ID if known
    a_parameter            NUMERIC(6,4) NOT NULL,             -- Discrimination
    b_parameter            NUMERIC(6,4) NOT NULL,             -- Difficulty
    c_parameter            NUMERIC(6,4) NOT NULL,             -- Guessing
    d_parameter            NUMERIC(6,4),                      -- Sometimes used (4PL)
    infit                  NUMERIC(6,4),                      -- Infit statistic
    outfit                 NUMERIC(6,4),                      -- Outfit statistic
    standard_error_a       NUMERIC(6,4),
    standard_error_b       NUMERIC(6,4),
    standard_error_c       NUMERIC(6,4),
    response_count         INTEGER NOT NULL,                   -- Number of responses for this item
    calibration_date       TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    created_by             INTEGER NOT NULL,
    created_on             TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by            INTEGER,
    modified_on            TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT fk_item_statistics_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_item_statistics_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.item_statistics IS 'Stores psychometric and statistical parameters for each exam item/question per year, including IRT parameters and fit statistics.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.item_statistics.item_stat_id IS 'Primary key.';
COMMENT ON COLUMN app.item_statistics.year_id IS 'FK to app.year; identifies the exam year.';
COMMENT ON COLUMN app.item_statistics.exam_day IS 'Exam day number (e.g., 1 or 2).';
COMMENT ON COLUMN app.item_statistics.subject IS 'Subject or area of the item (e.g., Math, Humanities).';
COMMENT ON COLUMN app.item_statistics.base_question_no IS 'Canonical base question number.';
COMMENT ON COLUMN app.item_statistics.item_id IS 'Official question ID if known.';
COMMENT ON COLUMN app.item_statistics.a_parameter IS 'Item discrimination parameter (a) from IRT.';
COMMENT ON COLUMN app.item_statistics.b_parameter IS 'Item difficulty parameter (b) from IRT.';
COMMENT ON COLUMN app.item_statistics.c_parameter IS 'Item guessing parameter (c) from IRT.';
COMMENT ON COLUMN app.item_statistics.d_parameter IS 'Item upper asymptote (d) parameter, if 4PL model is used.';
COMMENT ON COLUMN app.item_statistics.infit IS 'Infit statistic (model fit).';
COMMENT ON COLUMN app.item_statistics.outfit IS 'Outfit statistic (model fit).';
COMMENT ON COLUMN app.item_statistics.standard_error_a IS 'Standard error for a parameter.';
COMMENT ON COLUMN app.item_statistics.standard_error_b IS 'Standard error for b parameter.';
COMMENT ON COLUMN app.item_statistics.standard_error_c IS 'Standard error for c parameter.';
COMMENT ON COLUMN app.item_statistics.response_count IS 'Number of student responses used for statistics.';
COMMENT ON COLUMN app.item_statistics.calibration_date IS 'Date/time of item parameter calibration.';
COMMENT ON COLUMN app.item_statistics.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.item_statistics.created_on IS 'Timestamp when this record was created.';
COMMENT ON COLUMN app.item_statistics.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.item_statistics.modified_on IS 'Timestamp of last modification.';

-------------------------------


CREATE TABLE app.exam_attempt (
    exam_attempt_id          SERIAL,
    user_login_id            INTEGER NOT NULL,
    exam_year                INTEGER NOT NULL,
    booklet_color            TEXT NOT NULL,
    booklet_color_friendly   TEXT,
    test_day_number          INTEGER NOT NULL,
    started_on               TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    finished_on              TIMESTAMPTZ,
    score                    NUMERIC,
    is_simulation            BOOLEAN NOT NULL DEFAULT FALSE,
    notes                    TEXT,
    notes_friendly           TEXT,
    created_by               INTEGER NOT NULL,
    created_on               TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by              INTEGER,
    modified_on              TIMESTAMPTZ,
    is_active                BOOLEAN NOT NULL DEFAULT TRUE,

    -- Constraints (all named)
    CONSTRAINT pk_exam_attempt_id PRIMARY KEY (exam_attempt_id),
    CONSTRAINT fk_exam_attempt_user_login_id FOREIGN KEY (user_login_id) REFERENCES app.user_login(user_login_id) ON DELETE CASCADE,
    CONSTRAINT fk_exam_attempt_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_exam_attempt_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.exam_attempt IS 'Tracks each exam attempt per user, with day, booklet, score, simulation flag, and friendly fields for search.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.exam_attempt.exam_attempt_id IS 'Primary key.';
COMMENT ON COLUMN app.exam_attempt.user_login_id IS 'FK to app.user_login (user account).';
COMMENT ON COLUMN app.exam_attempt.exam_year IS 'Year of the exam attempted.';
COMMENT ON COLUMN app.exam_attempt.booklet_color IS 'Booklet color for the attempt.';
COMMENT ON COLUMN app.exam_attempt.booklet_color_friendly IS 'Normalized booklet color for search.';
COMMENT ON COLUMN app.exam_attempt.test_day_number IS 'Day number (1 or 2) of the exam.';
COMMENT ON COLUMN app.exam_attempt.started_on IS 'Timestamp when attempt started.';
COMMENT ON COLUMN app.exam_attempt.finished_on IS 'Timestamp when attempt finished.';
COMMENT ON COLUMN app.exam_attempt.score IS 'Final score for the attempt.';
COMMENT ON COLUMN app.exam_attempt.is_simulation IS 'TRUE if this was a simulation/mock.';
COMMENT ON COLUMN app.exam_attempt.notes IS 'Notes about this attempt.';
COMMENT ON COLUMN app.exam_attempt.notes_friendly IS 'Normalized notes for search.';
COMMENT ON COLUMN app.exam_attempt.created_by IS 'FK to app.user_login; user who created this record.';
COMMENT ON COLUMN app.exam_attempt.created_on IS 'Creation timestamp.';
COMMENT ON COLUMN app.exam_attempt.modified_by IS 'FK to app.user_login; user who last modified this record.';
COMMENT ON COLUMN app.exam_attempt.modified_on IS 'Modification timestamp.';
COMMENT ON COLUMN app.exam_attempt.is_active IS 'Active/archive flag.';



------------------------

CREATE TABLE app.error_log (
    error_log_id    SERIAL PRIMARY KEY,
    table_name      TEXT NOT NULL,
    process         TEXT NOT NULL,      -- The stored procedure or function name
    operation       TEXT NOT NULL,      -- INSERT, UPDATE, DELETE, etc.
    command         TEXT,               -- The SQL or procedure call that failed
    error_message   TEXT NOT NULL,      -- The error message/exception text
    error_code      TEXT,               -- Optional: error code (SQLSTATE, etc.)
    context_info    TEXT,               -- Optional: extra info as needed (JSON, etc.)
    user_name       TEXT,               -- Who ran it (can be null)
    created_on      TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Table comment
COMMENT ON TABLE app.error_log IS 'Logs errors or exceptions from database operations, with process, operation, SQL, error details, and context for auditing and troubleshooting.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.error_log.error_log_id IS 'Primary key.';
COMMENT ON COLUMN app.error_log.table_name IS 'The table affected by the operation.';
COMMENT ON COLUMN app.error_log.process IS 'Name of the stored procedure or function where the error occurred.';
COMMENT ON COLUMN app.error_log.operation IS 'Type of database operation (INSERT, UPDATE, DELETE, etc.).';
COMMENT ON COLUMN app.error_log.command IS 'The SQL statement or procedure call that caused the error.';
COMMENT ON COLUMN app.error_log.error_message IS 'Detailed error message or exception text.';
COMMENT ON COLUMN app.error_log.error_code IS 'Optional: error code, e.g., SQLSTATE.';
COMMENT ON COLUMN app.error_log.context_info IS 'Optional: additional context or parameters, possibly as JSON.';
COMMENT ON COLUMN app.error_log.user_name IS 'Who executed the operation (nullable).';
COMMENT ON COLUMN app.error_log.created_on IS 'Timestamp when the error was logged.';



-----------------------



CREATE TABLE IF NOT EXISTS app.approved_student (
    approved_student_id         SERIAL,
    enem_registration           VARCHAR(20) NOT NULL,
    student_name                TEXT NOT NULL,
    year                        SMALLINT NOT NULL,
    institution_id              INTEGER NOT NULL,  -- FK to normalized institution table
    institution_name            TEXT NOT NULL,
    institution_abbr            VARCHAR(40),
    institution_state_abbr      VARCHAR(40),
    campus_name                 VARCHAR(40),
    course_id                   INTEGER,           -- FK to normalized course table
    course_code                 VARCHAR(40),
    course_name                 VARCHAR(40),
    shift                       VARCHAR(40),
    degree_type                 VARCHAR(40),
    vagas_concorrencia          INTEGER,
    no_inscricao_enem           VARCHAR(40),              -- Original ENEM registration (for archival)
    no_modalidade_concorrencia  VARCHAR(40),
    st_bonus_perc               VARCHAR(40),
    qt_bonus_perc               VARCHAR(40),
    no_acao_afirmativa_bonus    VARCHAR(40),
    enem_score                  NUMERIC(6,2),
    cutoff_score                NUMERIC(6,2),
    classification              INTEGER,
    high_school_type            VARCHAR(40),
    quilombola                  VARCHAR(40),
    disabled                    VARCHAR(40),
    tipo_concorrencia           VARCHAR(40),
    user_id                     INTEGER,           -- Nullable FK to app.user_login(user_login_id)
    created_by                  INTEGER NOT NULL,
    created_on                  TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by                 INTEGER,
    modified_on                 TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_approved_student_id PRIMARY KEY (approved_student_id),
    CONSTRAINT uq_approved_student UNIQUE (enem_registration, year, institution_id, course_code),
    --CONSTRAINT fk_approved_student_institution_id FOREIGN KEY (institution_id) REFERENCES app.institution(institution_id),
    --CONSTRAINT fk_approved_student_course_id FOREIGN KEY (course_id) REFERENCES app.course(course_id),
    CONSTRAINT fk_approved_student_user_id FOREIGN KEY (user_id) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_approved_student_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_approved_student_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id)
);

-- Table comment
COMMENT ON TABLE app.approved_student IS 'Stores data about students approved in selection processes, including their ENEM details, assigned institution/course, bonus and affirmative action info, and user link if applicable.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.approved_student.approved_student_id IS 'Primary key.';
COMMENT ON COLUMN app.approved_student.enem_registration IS 'ENEM registration number (unique per year/institution/course).';
COMMENT ON COLUMN app.approved_student.student_name IS 'Full name of the student.';
COMMENT ON COLUMN app.approved_student.year IS 'Year of the selection process.';
COMMENT ON COLUMN app.approved_student.institution_id IS 'FK to app.institution; normalized ID for the educational institution.';
COMMENT ON COLUMN app.approved_student.institution_name IS 'Institution name as recorded for this entry (denormalized for history).';
COMMENT ON COLUMN app.approved_student.institution_abbr IS 'Abbreviation for the institution.';
COMMENT ON COLUMN app.approved_student.institution_state_abbr IS 'State abbreviation for the institution.';
COMMENT ON COLUMN app.approved_student.campus_name IS 'Name of the campus, if applicable.';
COMMENT ON COLUMN app.approved_student.course_id IS 'FK to app.course; normalized course ID (nullable).';
COMMENT ON COLUMN app.approved_student.course_code IS 'Course code as recorded for this entry (denormalized for history).';
COMMENT ON COLUMN app.approved_student.course_name IS 'Course name as recorded for this entry.';
COMMENT ON COLUMN app.approved_student.shift IS 'Shift of the course (e.g., morning, evening).';
COMMENT ON COLUMN app.approved_student.degree_type IS 'Type of degree (e.g., Bachelor, Technologist).';
COMMENT ON COLUMN app.approved_student.vagas_concorrencia IS 'Number of seats available in this category.';
COMMENT ON COLUMN app.approved_student.no_inscricao_enem IS 'Original ENEM registration (archival).';
COMMENT ON COLUMN app.approved_student.no_modalidade_concorrencia IS 'Type of competition or seat modality.';
COMMENT ON COLUMN app.approved_student.st_bonus_perc IS 'String representation of bonus percentage status.';
COMMENT ON COLUMN app.approved_student.qt_bonus_perc IS 'String or value for the bonus percentage quantity.';
COMMENT ON COLUMN app.approved_student.no_acao_afirmativa_bonus IS 'Type of affirmative action bonus.';
COMMENT ON COLUMN app.approved_student.enem_score IS 'Student''s ENEM score (numeric, 2 decimals).';
COMMENT ON COLUMN app.approved_student.cutoff_score IS 'Minimum cutoff score for approval (numeric, 2 decimals).';
COMMENT ON COLUMN app.approved_student.classification IS 'Classification/ranking of the student.';
COMMENT ON COLUMN app.approved_student.high_school_type IS 'Type of high school attended by the student.';
COMMENT ON COLUMN app.approved_student.quilombola IS 'Indicates if student is quilombola (yes/no).';
COMMENT ON COLUMN app.approved_student.disabled IS 'Indicates if student has a disability (yes/no).';
COMMENT ON COLUMN app.approved_student.tipo_concorrencia IS 'Type of competition or seat for this record.';
COMMENT ON COLUMN app.approved_student.user_id IS 'Nullable FK to app.user_login (if linked to a user account).';
COMMENT ON COLUMN app.approved_student.created_by IS 'FK to app.user_login; who created this record.';
COMMENT ON COLUMN app.approved_student.created_on IS 'Timestamp when the record was created.';
COMMENT ON COLUMN app.approved_student.modified_by IS 'FK to app.user_login; who last modified this record.';
COMMENT ON COLUMN app.approved_student.modified_on IS 'Timestamp of the most recent modification.';






-------------------------------


CREATE TABLE IF NOT EXISTS app.answer_submission (
    answer_submission_id      SERIAL,
    user_id                  INTEGER NOT NULL,
    year_id                  INTEGER NOT NULL,
    exam_day                 SMALLINT NOT NULL,
    booklet_color_id         INTEGER NOT NULL,
    foreign_language         VARCHAR(40) NOT NULL,
    raw_answers              VARCHAR(40) NOT NULL,
    mapped_answers           VARCHAR(40),           -- Now nullable!
    created_by               INTEGER NOT NULL,
    created_on               TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by              INTEGER,
    modified_on              TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_answer_submission_id PRIMARY KEY (answer_submission_id),
    CONSTRAINT fk_answer_submission_user_id FOREIGN KEY (user_id) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_answer_submission_year_id FOREIGN KEY (year_id) REFERENCES app.year(year_id),
    CONSTRAINT fk_answer_submission_booklet_color_id FOREIGN KEY (booklet_color_id) REFERENCES app.booklet_color(booklet_color_id),
    CONSTRAINT fk_answer_submission_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_answer_submission_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT uq_answer_submission_user_year_day UNIQUE (user_id, year_id, exam_day)
);

-- Table comment
COMMENT ON TABLE app.answer_submission IS 'Stores individual users’ answer submissions per exam year, day, and booklet color.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.answer_submission.answer_submission_id IS 'Primary key.';
COMMENT ON COLUMN app.answer_submission.user_id IS 'FK to app.user_login; identifies who submitted the answers.';
COMMENT ON COLUMN app.answer_submission.year_id IS 'FK to app.year; identifies the exam year.';
COMMENT ON COLUMN app.answer_submission.exam_day IS 'Exam day number (e.g., 1 or 2).';
COMMENT ON COLUMN app.answer_submission.booklet_color_id IS 'FK to app.booklet_color; identifies the version of the booklet used.';
COMMENT ON COLUMN app.answer_submission.foreign_language IS 'Foreign language selected (e.g., "English", "Spanish").';
COMMENT ON COLUMN app.answer_submission.raw_answers IS 'User’s original submitted answers (as entered).';
COMMENT ON COLUMN app.answer_submission.mapped_answers IS 'System-mapped or normalized answers (nullable).';
COMMENT ON COLUMN app.answer_submission.created_by IS 'FK to app.user_login; who created the submission record.';
COMMENT ON COLUMN app.answer_submission.created_on IS 'Timestamp when the submission was created.';
COMMENT ON COLUMN app.answer_submission.modified_by IS 'FK to app.user_login; who last modified the submission record.';
COMMENT ON COLUMN app.answer_submission.modified_on IS 'Timestamp of the most recent modification.';



--------------


CREATE TABLE IF NOT EXISTS app.answer_key (
    answer_key_id   SERIAL,
    year_id         INTEGER NOT NULL,
    exam_day        SMALLINT NOT NULL,
    key_type        VARCHAR(40) NOT NULL,         -- e.g., 'official', 'unofficial'
    key_source      VARCHAR(40) NOT NULL,         -- e.g., 'INEP', 'Prof. Lima'
    answers         VARCHAR(40) NOT NULL,         -- Correct answers in base order (string of N letters)
    created_by      INTEGER NOT NULL,
    created_on      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    modified_by     INTEGER,
    modified_on     TIMESTAMPTZ,

    -- Constraints
    CONSTRAINT pk_answer_key_id PRIMARY KEY (answer_key_id),
    CONSTRAINT fk_answer_key_year_id FOREIGN KEY (year_id) REFERENCES app.year(year_id),
    CONSTRAINT fk_answer_key_created_by FOREIGN KEY (created_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT fk_answer_key_modified_by FOREIGN KEY (modified_by) REFERENCES app.user_login(user_login_id),
    CONSTRAINT uq_answer_key_year_day_type UNIQUE (year_id, exam_day, key_type)
);

-- Table comment
COMMENT ON TABLE app.answer_key IS 'Stores official and unofficial answer keys for each exam year, day, and key type.';

-- Field comments (one-liners)
COMMENT ON COLUMN app.answer_key.answer_key_id IS 'Primary key.';
COMMENT ON COLUMN app.answer_key.year_id IS 'FK to app.year; identifies the exam year.';
COMMENT ON COLUMN app.answer_key.exam_day IS 'Exam day number (e.g., 1 for first day, 2 for second day).';
COMMENT ON COLUMN app.answer_key.key_type IS 'Type of answer key, e.g., "official" or "unofficial".';
COMMENT ON COLUMN app.answer_key.key_source IS 'Source or author of the answer key (e.g., "INEP", teacher name).';
COMMENT ON COLUMN app.answer_key.answers IS 'String of correct answers in base order (one letter per question).';
COMMENT ON COLUMN app.answer_key.created_by IS 'FK to app.user_login; who created the answer key record.';
COMMENT ON COLUMN app.answer_key.created_on IS 'Timestamp when the answer key was created.';
COMMENT ON COLUMN app.answer_key.modified_by IS 'FK to app.user_login; who last modified the answer key record.';
COMMENT ON COLUMN app.answer_key.modified_on IS 'Timestamp of the most recent modification.';